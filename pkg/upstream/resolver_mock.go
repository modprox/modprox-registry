package upstream

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock"
	"oss.indeed.com/go/modprox/pkg/coordinates"
)

// ResolverMock implements Resolver
type ResolverMock struct {
	t minimock.Tester

	funcResolve          func(m1 coordinates.Module) (rp1 *Request, err error)
	afterResolveCounter  uint64
	beforeResolveCounter uint64
	ResolveMock          mResolverMockResolve
}

// NewResolverMock returns a mock for Resolver
func NewResolverMock(t minimock.Tester) *ResolverMock {
	m := &ResolverMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.ResolveMock = mResolverMockResolve{mock: m}
	m.ResolveMock.callArgs = []*ResolverMockResolveParams{}

	return m
}

type mResolverMockResolve struct {
	mock               *ResolverMock
	defaultExpectation *ResolverMockResolveExpectation
	expectations       []*ResolverMockResolveExpectation

	callArgs []*ResolverMockResolveParams
	mutex    sync.RWMutex
}

// ResolverMockResolveExpectation specifies expectation struct of the Resolver.Resolve
type ResolverMockResolveExpectation struct {
	mock    *ResolverMock
	params  *ResolverMockResolveParams
	results *ResolverMockResolveResults
	Counter uint64
}

// ResolverMockResolveParams contains parameters of the Resolver.Resolve
type ResolverMockResolveParams struct {
	m1 coordinates.Module
}

// ResolverMockResolveResults contains results of the Resolver.Resolve
type ResolverMockResolveResults struct {
	rp1 *Request
	err error
}

// Expect sets up expected params for Resolver.Resolve
func (mmResolve *mResolverMockResolve) Expect(m1 coordinates.Module) *mResolverMockResolve {
	if mmResolve.mock.funcResolve != nil {
		mmResolve.mock.t.Fatalf("ResolverMock.Resolve mock is already set by Set")
	}

	if mmResolve.defaultExpectation == nil {
		mmResolve.defaultExpectation = &ResolverMockResolveExpectation{}
	}

	mmResolve.defaultExpectation.params = &ResolverMockResolveParams{m1}
	for _, e := range mmResolve.expectations {
		if minimock.Equal(e.params, mmResolve.defaultExpectation.params) {
			mmResolve.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmResolve.defaultExpectation.params)
		}
	}

	return mmResolve
}

// Return sets up results that will be returned by Resolver.Resolve
func (mmResolve *mResolverMockResolve) Return(rp1 *Request, err error) *ResolverMock {
	if mmResolve.mock.funcResolve != nil {
		mmResolve.mock.t.Fatalf("ResolverMock.Resolve mock is already set by Set")
	}

	if mmResolve.defaultExpectation == nil {
		mmResolve.defaultExpectation = &ResolverMockResolveExpectation{mock: mmResolve.mock}
	}
	mmResolve.defaultExpectation.results = &ResolverMockResolveResults{rp1, err}
	return mmResolve.mock
}

//Set uses given function f to mock the Resolver.Resolve method
func (mmResolve *mResolverMockResolve) Set(f func(m1 coordinates.Module) (rp1 *Request, err error)) *ResolverMock {
	if mmResolve.defaultExpectation != nil {
		mmResolve.mock.t.Fatalf("Default expectation is already set for the Resolver.Resolve method")
	}

	if len(mmResolve.expectations) > 0 {
		mmResolve.mock.t.Fatalf("Some expectations are already set for the Resolver.Resolve method")
	}

	mmResolve.mock.funcResolve = f
	return mmResolve.mock
}

// When sets expectation for the Resolver.Resolve which will trigger the result defined by the following
// Then helper
func (mmResolve *mResolverMockResolve) When(m1 coordinates.Module) *ResolverMockResolveExpectation {
	if mmResolve.mock.funcResolve != nil {
		mmResolve.mock.t.Fatalf("ResolverMock.Resolve mock is already set by Set")
	}

	expectation := &ResolverMockResolveExpectation{
		mock:   mmResolve.mock,
		params: &ResolverMockResolveParams{m1},
	}
	mmResolve.expectations = append(mmResolve.expectations, expectation)
	return expectation
}

// Then sets up Resolver.Resolve return parameters for the expectation previously defined by the When method
func (e *ResolverMockResolveExpectation) Then(rp1 *Request, err error) *ResolverMock {
	e.results = &ResolverMockResolveResults{rp1, err}
	return e.mock
}

// Resolve implements Resolver
func (mmResolve *ResolverMock) Resolve(m1 coordinates.Module) (rp1 *Request, err error) {
	mm_atomic.AddUint64(&mmResolve.beforeResolveCounter, 1)
	defer mm_atomic.AddUint64(&mmResolve.afterResolveCounter, 1)

	params := &ResolverMockResolveParams{m1}

	// Record call args
	mmResolve.ResolveMock.mutex.Lock()
	mmResolve.ResolveMock.callArgs = append(mmResolve.ResolveMock.callArgs, params)
	mmResolve.ResolveMock.mutex.Unlock()

	for _, e := range mmResolve.ResolveMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.rp1, e.results.err
		}
	}

	if mmResolve.ResolveMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmResolve.ResolveMock.defaultExpectation.Counter, 1)
		want := mmResolve.ResolveMock.defaultExpectation.params
		got := ResolverMockResolveParams{m1}
		if want != nil && !minimock.Equal(*want, got) {
			mmResolve.t.Errorf("ResolverMock.Resolve got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := mmResolve.ResolveMock.defaultExpectation.results
		if results == nil {
			mmResolve.t.Fatal("No results are set for the ResolverMock.Resolve")
		}
		return (*results).rp1, (*results).err
	}
	if mmResolve.funcResolve != nil {
		return mmResolve.funcResolve(m1)
	}
	mmResolve.t.Fatalf("Unexpected call to ResolverMock.Resolve. %v", m1)
	return
}

// ResolveAfterCounter returns a count of finished ResolverMock.Resolve invocations
func (mmResolve *ResolverMock) ResolveAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmResolve.afterResolveCounter)
}

// ResolveBeforeCounter returns a count of ResolverMock.Resolve invocations
func (mmResolve *ResolverMock) ResolveBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmResolve.beforeResolveCounter)
}

// Calls returns a list of arguments used in each call to ResolverMock.Resolve.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmResolve *mResolverMockResolve) Calls() []*ResolverMockResolveParams {
	mmResolve.mutex.RLock()

	argCopy := make([]*ResolverMockResolveParams, len(mmResolve.callArgs))
	copy(argCopy, mmResolve.callArgs)

	mmResolve.mutex.RUnlock()

	return argCopy
}

// MinimockResolveDone returns true if the count of the Resolve invocations corresponds
// the number of defined expectations
func (m *ResolverMock) MinimockResolveDone() bool {
	for _, e := range m.ResolveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ResolveMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterResolveCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcResolve != nil && mm_atomic.LoadUint64(&m.afterResolveCounter) < 1 {
		return false
	}
	return true
}

// MinimockResolveInspect logs each unmet expectation
func (m *ResolverMock) MinimockResolveInspect() {
	for _, e := range m.ResolveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ResolverMock.Resolve with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ResolveMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterResolveCounter) < 1 {
		if m.ResolveMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ResolverMock.Resolve")
		} else {
			m.t.Errorf("Expected call to ResolverMock.Resolve with params: %#v", *m.ResolveMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcResolve != nil && mm_atomic.LoadUint64(&m.afterResolveCounter) < 1 {
		m.t.Error("Expected call to ResolverMock.Resolve")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ResolverMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockResolveInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ResolverMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ResolverMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockResolveDone()
}
