package stats

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	mm_atomic "sync/atomic"
	"time"
	mm_time "time"

	"github.com/gojuno/minimock"
)

// SenderMock implements Sender
type SenderMock struct {
	t minimock.Tester

	funcCount          func(metric string, i int)
	afterCountCounter  uint64
	beforeCountCounter uint64
	CountMock          mSenderMockCount

	funcGauge          func(metric string, n int)
	afterGaugeCounter  uint64
	beforeGaugeCounter uint64
	GaugeMock          mSenderMockGauge

	funcGaugeMS          func(metric string, t time.Time)
	afterGaugeMSCounter  uint64
	beforeGaugeMSCounter uint64
	GaugeMSMock          mSenderMockGaugeMS
}

// NewSenderMock returns a mock for Sender
func NewSenderMock(t minimock.Tester) *SenderMock {
	m := &SenderMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}
	m.CountMock = mSenderMockCount{mock: m}
	m.GaugeMock = mSenderMockGauge{mock: m}
	m.GaugeMSMock = mSenderMockGaugeMS{mock: m}

	return m
}

type mSenderMockCount struct {
	mock               *SenderMock
	defaultExpectation *SenderMockCountExpectation
	expectations       []*SenderMockCountExpectation
}

// SenderMockCountExpectation specifies expectation struct of the Sender.Count
type SenderMockCountExpectation struct {
	mock   *SenderMock
	params *SenderMockCountParams

	Counter uint64
}

// SenderMockCountParams contains parameters of the Sender.Count
type SenderMockCountParams struct {
	metric string
	i      int
}

// Expect sets up expected params for Sender.Count
func (m *mSenderMockCount) Expect(metric string, i int) *mSenderMockCount {
	if m.mock.funcCount != nil {
		m.mock.t.Fatalf("SenderMock.Count mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &SenderMockCountExpectation{}
	}

	m.defaultExpectation.params = &SenderMockCountParams{metric, i}
	for _, e := range m.expectations {
		if minimock.Equal(e.params, m.defaultExpectation.params) {
			m.mock.t.Fatalf("Expectation set by When has same params: %#v", *m.defaultExpectation.params)
		}
	}

	return m
}

// Return sets up results that will be returned by Sender.Count
func (m *mSenderMockCount) Return() *SenderMock {
	if m.mock.funcCount != nil {
		m.mock.t.Fatalf("SenderMock.Count mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &SenderMockCountExpectation{mock: m.mock}
	}

	return m.mock
}

//Set uses given function f to mock the Sender.Count method
func (m *mSenderMockCount) Set(f func(metric string, i int)) *SenderMock {
	if m.defaultExpectation != nil {
		m.mock.t.Fatalf("Default expectation is already set for the Sender.Count method")
	}

	if len(m.expectations) > 0 {
		m.mock.t.Fatalf("Some expectations are already set for the Sender.Count method")
	}

	m.mock.funcCount = f
	return m.mock
}

// Count implements Sender
func (m *SenderMock) Count(metric string, i int) {
	mm_atomic.AddUint64(&m.beforeCountCounter, 1)
	defer mm_atomic.AddUint64(&m.afterCountCounter, 1)

	for _, e := range m.CountMock.expectations {
		if minimock.Equal(*e.params, SenderMockCountParams{metric, i}) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return
		}
	}

	if m.CountMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&m.CountMock.defaultExpectation.Counter, 1)
		want := m.CountMock.defaultExpectation.params
		got := SenderMockCountParams{metric, i}
		if want != nil && !minimock.Equal(*want, got) {
			m.t.Errorf("SenderMock.Count got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		return

	}
	if m.funcCount != nil {
		m.funcCount(metric, i)
		return
	}
	m.t.Fatalf("Unexpected call to SenderMock.Count. %v %v", metric, i)

}

// CountAfterCounter returns a count of finished SenderMock.Count invocations
func (m *SenderMock) CountAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&m.afterCountCounter)
}

// CountBeforeCounter returns a count of SenderMock.Count invocations
func (m *SenderMock) CountBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&m.beforeCountCounter)
}

// MinimockCountDone returns true if the count of the Count invocations corresponds
// the number of defined expectations
func (m *SenderMock) MinimockCountDone() bool {
	for _, e := range m.CountMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CountMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCountCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCount != nil && mm_atomic.LoadUint64(&m.afterCountCounter) < 1 {
		return false
	}
	return true
}

// MinimockCountInspect logs each unmet expectation
func (m *SenderMock) MinimockCountInspect() {
	for _, e := range m.CountMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to SenderMock.Count with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CountMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCountCounter) < 1 {
		if m.CountMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to SenderMock.Count")
		} else {
			m.t.Errorf("Expected call to SenderMock.Count with params: %#v", *m.CountMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCount != nil && mm_atomic.LoadUint64(&m.afterCountCounter) < 1 {
		m.t.Error("Expected call to SenderMock.Count")
	}
}

type mSenderMockGauge struct {
	mock               *SenderMock
	defaultExpectation *SenderMockGaugeExpectation
	expectations       []*SenderMockGaugeExpectation
}

// SenderMockGaugeExpectation specifies expectation struct of the Sender.Gauge
type SenderMockGaugeExpectation struct {
	mock   *SenderMock
	params *SenderMockGaugeParams

	Counter uint64
}

// SenderMockGaugeParams contains parameters of the Sender.Gauge
type SenderMockGaugeParams struct {
	metric string
	n      int
}

// Expect sets up expected params for Sender.Gauge
func (m *mSenderMockGauge) Expect(metric string, n int) *mSenderMockGauge {
	if m.mock.funcGauge != nil {
		m.mock.t.Fatalf("SenderMock.Gauge mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &SenderMockGaugeExpectation{}
	}

	m.defaultExpectation.params = &SenderMockGaugeParams{metric, n}
	for _, e := range m.expectations {
		if minimock.Equal(e.params, m.defaultExpectation.params) {
			m.mock.t.Fatalf("Expectation set by When has same params: %#v", *m.defaultExpectation.params)
		}
	}

	return m
}

// Return sets up results that will be returned by Sender.Gauge
func (m *mSenderMockGauge) Return() *SenderMock {
	if m.mock.funcGauge != nil {
		m.mock.t.Fatalf("SenderMock.Gauge mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &SenderMockGaugeExpectation{mock: m.mock}
	}

	return m.mock
}

//Set uses given function f to mock the Sender.Gauge method
func (m *mSenderMockGauge) Set(f func(metric string, n int)) *SenderMock {
	if m.defaultExpectation != nil {
		m.mock.t.Fatalf("Default expectation is already set for the Sender.Gauge method")
	}

	if len(m.expectations) > 0 {
		m.mock.t.Fatalf("Some expectations are already set for the Sender.Gauge method")
	}

	m.mock.funcGauge = f
	return m.mock
}

// Gauge implements Sender
func (m *SenderMock) Gauge(metric string, n int) {
	mm_atomic.AddUint64(&m.beforeGaugeCounter, 1)
	defer mm_atomic.AddUint64(&m.afterGaugeCounter, 1)

	for _, e := range m.GaugeMock.expectations {
		if minimock.Equal(*e.params, SenderMockGaugeParams{metric, n}) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return
		}
	}

	if m.GaugeMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&m.GaugeMock.defaultExpectation.Counter, 1)
		want := m.GaugeMock.defaultExpectation.params
		got := SenderMockGaugeParams{metric, n}
		if want != nil && !minimock.Equal(*want, got) {
			m.t.Errorf("SenderMock.Gauge got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		return

	}
	if m.funcGauge != nil {
		m.funcGauge(metric, n)
		return
	}
	m.t.Fatalf("Unexpected call to SenderMock.Gauge. %v %v", metric, n)

}

// GaugeAfterCounter returns a count of finished SenderMock.Gauge invocations
func (m *SenderMock) GaugeAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&m.afterGaugeCounter)
}

// GaugeBeforeCounter returns a count of SenderMock.Gauge invocations
func (m *SenderMock) GaugeBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&m.beforeGaugeCounter)
}

// MinimockGaugeDone returns true if the count of the Gauge invocations corresponds
// the number of defined expectations
func (m *SenderMock) MinimockGaugeDone() bool {
	for _, e := range m.GaugeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GaugeMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGaugeCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGauge != nil && mm_atomic.LoadUint64(&m.afterGaugeCounter) < 1 {
		return false
	}
	return true
}

// MinimockGaugeInspect logs each unmet expectation
func (m *SenderMock) MinimockGaugeInspect() {
	for _, e := range m.GaugeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to SenderMock.Gauge with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GaugeMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGaugeCounter) < 1 {
		if m.GaugeMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to SenderMock.Gauge")
		} else {
			m.t.Errorf("Expected call to SenderMock.Gauge with params: %#v", *m.GaugeMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGauge != nil && mm_atomic.LoadUint64(&m.afterGaugeCounter) < 1 {
		m.t.Error("Expected call to SenderMock.Gauge")
	}
}

type mSenderMockGaugeMS struct {
	mock               *SenderMock
	defaultExpectation *SenderMockGaugeMSExpectation
	expectations       []*SenderMockGaugeMSExpectation
}

// SenderMockGaugeMSExpectation specifies expectation struct of the Sender.GaugeMS
type SenderMockGaugeMSExpectation struct {
	mock   *SenderMock
	params *SenderMockGaugeMSParams

	Counter uint64
}

// SenderMockGaugeMSParams contains parameters of the Sender.GaugeMS
type SenderMockGaugeMSParams struct {
	metric string
	t      time.Time
}

// Expect sets up expected params for Sender.GaugeMS
func (m *mSenderMockGaugeMS) Expect(metric string, t time.Time) *mSenderMockGaugeMS {
	if m.mock.funcGaugeMS != nil {
		m.mock.t.Fatalf("SenderMock.GaugeMS mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &SenderMockGaugeMSExpectation{}
	}

	m.defaultExpectation.params = &SenderMockGaugeMSParams{metric, t}
	for _, e := range m.expectations {
		if minimock.Equal(e.params, m.defaultExpectation.params) {
			m.mock.t.Fatalf("Expectation set by When has same params: %#v", *m.defaultExpectation.params)
		}
	}

	return m
}

// Return sets up results that will be returned by Sender.GaugeMS
func (m *mSenderMockGaugeMS) Return() *SenderMock {
	if m.mock.funcGaugeMS != nil {
		m.mock.t.Fatalf("SenderMock.GaugeMS mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &SenderMockGaugeMSExpectation{mock: m.mock}
	}

	return m.mock
}

//Set uses given function f to mock the Sender.GaugeMS method
func (m *mSenderMockGaugeMS) Set(f func(metric string, t time.Time)) *SenderMock {
	if m.defaultExpectation != nil {
		m.mock.t.Fatalf("Default expectation is already set for the Sender.GaugeMS method")
	}

	if len(m.expectations) > 0 {
		m.mock.t.Fatalf("Some expectations are already set for the Sender.GaugeMS method")
	}

	m.mock.funcGaugeMS = f
	return m.mock
}

// GaugeMS implements Sender
func (m *SenderMock) GaugeMS(metric string, t time.Time) {
	mm_atomic.AddUint64(&m.beforeGaugeMSCounter, 1)
	defer mm_atomic.AddUint64(&m.afterGaugeMSCounter, 1)

	for _, e := range m.GaugeMSMock.expectations {
		if minimock.Equal(*e.params, SenderMockGaugeMSParams{metric, t}) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return
		}
	}

	if m.GaugeMSMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&m.GaugeMSMock.defaultExpectation.Counter, 1)
		want := m.GaugeMSMock.defaultExpectation.params
		got := SenderMockGaugeMSParams{metric, t}
		if want != nil && !minimock.Equal(*want, got) {
			m.t.Errorf("SenderMock.GaugeMS got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		return

	}
	if m.funcGaugeMS != nil {
		m.funcGaugeMS(metric, t)
		return
	}
	m.t.Fatalf("Unexpected call to SenderMock.GaugeMS. %v %v", metric, t)

}

// GaugeMSAfterCounter returns a count of finished SenderMock.GaugeMS invocations
func (m *SenderMock) GaugeMSAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&m.afterGaugeMSCounter)
}

// GaugeMSBeforeCounter returns a count of SenderMock.GaugeMS invocations
func (m *SenderMock) GaugeMSBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&m.beforeGaugeMSCounter)
}

// MinimockGaugeMSDone returns true if the count of the GaugeMS invocations corresponds
// the number of defined expectations
func (m *SenderMock) MinimockGaugeMSDone() bool {
	for _, e := range m.GaugeMSMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GaugeMSMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGaugeMSCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGaugeMS != nil && mm_atomic.LoadUint64(&m.afterGaugeMSCounter) < 1 {
		return false
	}
	return true
}

// MinimockGaugeMSInspect logs each unmet expectation
func (m *SenderMock) MinimockGaugeMSInspect() {
	for _, e := range m.GaugeMSMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to SenderMock.GaugeMS with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GaugeMSMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGaugeMSCounter) < 1 {
		if m.GaugeMSMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to SenderMock.GaugeMS")
		} else {
			m.t.Errorf("Expected call to SenderMock.GaugeMS with params: %#v", *m.GaugeMSMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGaugeMS != nil && mm_atomic.LoadUint64(&m.afterGaugeMSCounter) < 1 {
		m.t.Error("Expected call to SenderMock.GaugeMS")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *SenderMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockCountInspect()

		m.MinimockGaugeInspect()

		m.MinimockGaugeMSInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *SenderMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *SenderMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCountDone() &&
		m.MinimockGaugeDone() &&
		m.MinimockGaugeMSDone()
}
