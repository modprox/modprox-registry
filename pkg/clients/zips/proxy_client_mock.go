package zips

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"gophers.dev/pkgs/semantic"
	"oss.indeed.com/go/modprox/pkg/coordinates"
	"oss.indeed.com/go/modprox/pkg/repository"
)

// ProxyClientMock implements ProxyClient
type ProxyClientMock struct {
	t minimock.Tester

	funcGet          func(m1 coordinates.Module) (b1 repository.Blob, err error)
	inspectFuncGet   func(m1 coordinates.Module)
	afterGetCounter  uint64
	beforeGetCounter uint64
	GetMock          mProxyClientMockGet

	funcList          func(source string) (ta1 []semantic.Tag, err error)
	inspectFuncList   func(source string)
	afterListCounter  uint64
	beforeListCounter uint64
	ListMock          mProxyClientMockList
}

// NewProxyClientMock returns a mock for ProxyClient
func NewProxyClientMock(t minimock.Tester) *ProxyClientMock {
	m := &ProxyClientMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetMock = mProxyClientMockGet{mock: m}
	m.GetMock.callArgs = []*ProxyClientMockGetParams{}

	m.ListMock = mProxyClientMockList{mock: m}
	m.ListMock.callArgs = []*ProxyClientMockListParams{}

	return m
}

type mProxyClientMockGet struct {
	mock               *ProxyClientMock
	defaultExpectation *ProxyClientMockGetExpectation
	expectations       []*ProxyClientMockGetExpectation

	callArgs []*ProxyClientMockGetParams
	mutex    sync.RWMutex
}

// ProxyClientMockGetExpectation specifies expectation struct of the ProxyClient.Get
type ProxyClientMockGetExpectation struct {
	mock    *ProxyClientMock
	params  *ProxyClientMockGetParams
	results *ProxyClientMockGetResults
	Counter uint64
}

// ProxyClientMockGetParams contains parameters of the ProxyClient.Get
type ProxyClientMockGetParams struct {
	m1 coordinates.Module
}

// ProxyClientMockGetResults contains results of the ProxyClient.Get
type ProxyClientMockGetResults struct {
	b1  repository.Blob
	err error
}

// Expect sets up expected params for ProxyClient.Get
func (mmGet *mProxyClientMockGet) Expect(m1 coordinates.Module) *mProxyClientMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("ProxyClientMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &ProxyClientMockGetExpectation{}
	}

	mmGet.defaultExpectation.params = &ProxyClientMockGetParams{m1}
	for _, e := range mmGet.expectations {
		if minimock.Equal(e.params, mmGet.defaultExpectation.params) {
			mmGet.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGet.defaultExpectation.params)
		}
	}

	return mmGet
}

// Inspect accepts an inspector function that has same arguments as the ProxyClient.Get
func (mmGet *mProxyClientMockGet) Inspect(f func(m1 coordinates.Module)) *mProxyClientMockGet {
	if mmGet.mock.inspectFuncGet != nil {
		mmGet.mock.t.Fatalf("Inspect function is already set for ProxyClientMock.Get")
	}

	mmGet.mock.inspectFuncGet = f

	return mmGet
}

// Return sets up results that will be returned by ProxyClient.Get
func (mmGet *mProxyClientMockGet) Return(b1 repository.Blob, err error) *ProxyClientMock {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("ProxyClientMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &ProxyClientMockGetExpectation{mock: mmGet.mock}
	}
	mmGet.defaultExpectation.results = &ProxyClientMockGetResults{b1, err}
	return mmGet.mock
}

//Set uses given function f to mock the ProxyClient.Get method
func (mmGet *mProxyClientMockGet) Set(f func(m1 coordinates.Module) (b1 repository.Blob, err error)) *ProxyClientMock {
	if mmGet.defaultExpectation != nil {
		mmGet.mock.t.Fatalf("Default expectation is already set for the ProxyClient.Get method")
	}

	if len(mmGet.expectations) > 0 {
		mmGet.mock.t.Fatalf("Some expectations are already set for the ProxyClient.Get method")
	}

	mmGet.mock.funcGet = f
	return mmGet.mock
}

// When sets expectation for the ProxyClient.Get which will trigger the result defined by the following
// Then helper
func (mmGet *mProxyClientMockGet) When(m1 coordinates.Module) *ProxyClientMockGetExpectation {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("ProxyClientMock.Get mock is already set by Set")
	}

	expectation := &ProxyClientMockGetExpectation{
		mock:   mmGet.mock,
		params: &ProxyClientMockGetParams{m1},
	}
	mmGet.expectations = append(mmGet.expectations, expectation)
	return expectation
}

// Then sets up ProxyClient.Get return parameters for the expectation previously defined by the When method
func (e *ProxyClientMockGetExpectation) Then(b1 repository.Blob, err error) *ProxyClientMock {
	e.results = &ProxyClientMockGetResults{b1, err}
	return e.mock
}

// Get implements ProxyClient
func (mmGet *ProxyClientMock) Get(m1 coordinates.Module) (b1 repository.Blob, err error) {
	mm_atomic.AddUint64(&mmGet.beforeGetCounter, 1)
	defer mm_atomic.AddUint64(&mmGet.afterGetCounter, 1)

	if mmGet.inspectFuncGet != nil {
		mmGet.inspectFuncGet(m1)
	}

	mm_params := &ProxyClientMockGetParams{m1}

	// Record call args
	mmGet.GetMock.mutex.Lock()
	mmGet.GetMock.callArgs = append(mmGet.GetMock.callArgs, mm_params)
	mmGet.GetMock.mutex.Unlock()

	for _, e := range mmGet.GetMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.b1, e.results.err
		}
	}

	if mmGet.GetMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGet.GetMock.defaultExpectation.Counter, 1)
		mm_want := mmGet.GetMock.defaultExpectation.params
		mm_got := ProxyClientMockGetParams{m1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGet.t.Errorf("ProxyClientMock.Get got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGet.GetMock.defaultExpectation.results
		if mm_results == nil {
			mmGet.t.Fatal("No results are set for the ProxyClientMock.Get")
		}
		return (*mm_results).b1, (*mm_results).err
	}
	if mmGet.funcGet != nil {
		return mmGet.funcGet(m1)
	}
	mmGet.t.Fatalf("Unexpected call to ProxyClientMock.Get. %v", m1)
	return
}

// GetAfterCounter returns a count of finished ProxyClientMock.Get invocations
func (mmGet *ProxyClientMock) GetAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.afterGetCounter)
}

// GetBeforeCounter returns a count of ProxyClientMock.Get invocations
func (mmGet *ProxyClientMock) GetBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.beforeGetCounter)
}

// Calls returns a list of arguments used in each call to ProxyClientMock.Get.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGet *mProxyClientMockGet) Calls() []*ProxyClientMockGetParams {
	mmGet.mutex.RLock()

	argCopy := make([]*ProxyClientMockGetParams, len(mmGet.callArgs))
	copy(argCopy, mmGet.callArgs)

	mmGet.mutex.RUnlock()

	return argCopy
}

// MinimockGetDone returns true if the count of the Get invocations corresponds
// the number of defined expectations
func (m *ProxyClientMock) MinimockGetDone() bool {
	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGet != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetInspect logs each unmet expectation
func (m *ProxyClientMock) MinimockGetInspect() {
	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ProxyClientMock.Get with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		if m.GetMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ProxyClientMock.Get")
		} else {
			m.t.Errorf("Expected call to ProxyClientMock.Get with params: %#v", *m.GetMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGet != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		m.t.Error("Expected call to ProxyClientMock.Get")
	}
}

type mProxyClientMockList struct {
	mock               *ProxyClientMock
	defaultExpectation *ProxyClientMockListExpectation
	expectations       []*ProxyClientMockListExpectation

	callArgs []*ProxyClientMockListParams
	mutex    sync.RWMutex
}

// ProxyClientMockListExpectation specifies expectation struct of the ProxyClient.List
type ProxyClientMockListExpectation struct {
	mock    *ProxyClientMock
	params  *ProxyClientMockListParams
	results *ProxyClientMockListResults
	Counter uint64
}

// ProxyClientMockListParams contains parameters of the ProxyClient.List
type ProxyClientMockListParams struct {
	source string
}

// ProxyClientMockListResults contains results of the ProxyClient.List
type ProxyClientMockListResults struct {
	ta1 []semantic.Tag
	err error
}

// Expect sets up expected params for ProxyClient.List
func (mmList *mProxyClientMockList) Expect(source string) *mProxyClientMockList {
	if mmList.mock.funcList != nil {
		mmList.mock.t.Fatalf("ProxyClientMock.List mock is already set by Set")
	}

	if mmList.defaultExpectation == nil {
		mmList.defaultExpectation = &ProxyClientMockListExpectation{}
	}

	mmList.defaultExpectation.params = &ProxyClientMockListParams{source}
	for _, e := range mmList.expectations {
		if minimock.Equal(e.params, mmList.defaultExpectation.params) {
			mmList.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmList.defaultExpectation.params)
		}
	}

	return mmList
}

// Inspect accepts an inspector function that has same arguments as the ProxyClient.List
func (mmList *mProxyClientMockList) Inspect(f func(source string)) *mProxyClientMockList {
	if mmList.mock.inspectFuncList != nil {
		mmList.mock.t.Fatalf("Inspect function is already set for ProxyClientMock.List")
	}

	mmList.mock.inspectFuncList = f

	return mmList
}

// Return sets up results that will be returned by ProxyClient.List
func (mmList *mProxyClientMockList) Return(ta1 []semantic.Tag, err error) *ProxyClientMock {
	if mmList.mock.funcList != nil {
		mmList.mock.t.Fatalf("ProxyClientMock.List mock is already set by Set")
	}

	if mmList.defaultExpectation == nil {
		mmList.defaultExpectation = &ProxyClientMockListExpectation{mock: mmList.mock}
	}
	mmList.defaultExpectation.results = &ProxyClientMockListResults{ta1, err}
	return mmList.mock
}

//Set uses given function f to mock the ProxyClient.List method
func (mmList *mProxyClientMockList) Set(f func(source string) (ta1 []semantic.Tag, err error)) *ProxyClientMock {
	if mmList.defaultExpectation != nil {
		mmList.mock.t.Fatalf("Default expectation is already set for the ProxyClient.List method")
	}

	if len(mmList.expectations) > 0 {
		mmList.mock.t.Fatalf("Some expectations are already set for the ProxyClient.List method")
	}

	mmList.mock.funcList = f
	return mmList.mock
}

// When sets expectation for the ProxyClient.List which will trigger the result defined by the following
// Then helper
func (mmList *mProxyClientMockList) When(source string) *ProxyClientMockListExpectation {
	if mmList.mock.funcList != nil {
		mmList.mock.t.Fatalf("ProxyClientMock.List mock is already set by Set")
	}

	expectation := &ProxyClientMockListExpectation{
		mock:   mmList.mock,
		params: &ProxyClientMockListParams{source},
	}
	mmList.expectations = append(mmList.expectations, expectation)
	return expectation
}

// Then sets up ProxyClient.List return parameters for the expectation previously defined by the When method
func (e *ProxyClientMockListExpectation) Then(ta1 []semantic.Tag, err error) *ProxyClientMock {
	e.results = &ProxyClientMockListResults{ta1, err}
	return e.mock
}

// List implements ProxyClient
func (mmList *ProxyClientMock) List(source string) (ta1 []semantic.Tag, err error) {
	mm_atomic.AddUint64(&mmList.beforeListCounter, 1)
	defer mm_atomic.AddUint64(&mmList.afterListCounter, 1)

	if mmList.inspectFuncList != nil {
		mmList.inspectFuncList(source)
	}

	mm_params := &ProxyClientMockListParams{source}

	// Record call args
	mmList.ListMock.mutex.Lock()
	mmList.ListMock.callArgs = append(mmList.ListMock.callArgs, mm_params)
	mmList.ListMock.mutex.Unlock()

	for _, e := range mmList.ListMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ta1, e.results.err
		}
	}

	if mmList.ListMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmList.ListMock.defaultExpectation.Counter, 1)
		mm_want := mmList.ListMock.defaultExpectation.params
		mm_got := ProxyClientMockListParams{source}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmList.t.Errorf("ProxyClientMock.List got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmList.ListMock.defaultExpectation.results
		if mm_results == nil {
			mmList.t.Fatal("No results are set for the ProxyClientMock.List")
		}
		return (*mm_results).ta1, (*mm_results).err
	}
	if mmList.funcList != nil {
		return mmList.funcList(source)
	}
	mmList.t.Fatalf("Unexpected call to ProxyClientMock.List. %v", source)
	return
}

// ListAfterCounter returns a count of finished ProxyClientMock.List invocations
func (mmList *ProxyClientMock) ListAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmList.afterListCounter)
}

// ListBeforeCounter returns a count of ProxyClientMock.List invocations
func (mmList *ProxyClientMock) ListBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmList.beforeListCounter)
}

// Calls returns a list of arguments used in each call to ProxyClientMock.List.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmList *mProxyClientMockList) Calls() []*ProxyClientMockListParams {
	mmList.mutex.RLock()

	argCopy := make([]*ProxyClientMockListParams, len(mmList.callArgs))
	copy(argCopy, mmList.callArgs)

	mmList.mutex.RUnlock()

	return argCopy
}

// MinimockListDone returns true if the count of the List invocations corresponds
// the number of defined expectations
func (m *ProxyClientMock) MinimockListDone() bool {
	for _, e := range m.ListMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ListMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterListCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcList != nil && mm_atomic.LoadUint64(&m.afterListCounter) < 1 {
		return false
	}
	return true
}

// MinimockListInspect logs each unmet expectation
func (m *ProxyClientMock) MinimockListInspect() {
	for _, e := range m.ListMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ProxyClientMock.List with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ListMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterListCounter) < 1 {
		if m.ListMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ProxyClientMock.List")
		} else {
			m.t.Errorf("Expected call to ProxyClientMock.List with params: %#v", *m.ListMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcList != nil && mm_atomic.LoadUint64(&m.afterListCounter) < 1 {
		m.t.Error("Expected call to ProxyClientMock.List")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ProxyClientMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetInspect()

		m.MinimockListInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ProxyClientMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ProxyClientMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetDone() &&
		m.MinimockListDone()
}
