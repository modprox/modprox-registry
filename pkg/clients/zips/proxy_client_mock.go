package zips

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock"
	"oss.indeed.com/go/modprox/pkg/coordinates"
	"oss.indeed.com/go/modprox/pkg/repository"
)

// ProxyClientMock implements ProxyClient
type ProxyClientMock struct {
	t minimock.Tester

	funcGet          func(m1 coordinates.Module) (b1 repository.Blob, err error)
	inspectFuncGet   func(m1 coordinates.Module)
	afterGetCounter  uint64
	beforeGetCounter uint64
	GetMock          mProxyClientMockGet
}

// NewProxyClientMock returns a mock for ProxyClient
func NewProxyClientMock(t minimock.Tester) *ProxyClientMock {
	m := &ProxyClientMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetMock = mProxyClientMockGet{mock: m}
	m.GetMock.callArgs = []*ProxyClientMockGetParams{}

	return m
}

type mProxyClientMockGet struct {
	mock               *ProxyClientMock
	defaultExpectation *ProxyClientMockGetExpectation
	expectations       []*ProxyClientMockGetExpectation

	callArgs []*ProxyClientMockGetParams
	mutex    sync.RWMutex
}

// ProxyClientMockGetExpectation specifies expectation struct of the ProxyClient.Get
type ProxyClientMockGetExpectation struct {
	mock    *ProxyClientMock
	params  *ProxyClientMockGetParams
	results *ProxyClientMockGetResults
	Counter uint64
}

// ProxyClientMockGetParams contains parameters of the ProxyClient.Get
type ProxyClientMockGetParams struct {
	m1 coordinates.Module
}

// ProxyClientMockGetResults contains results of the ProxyClient.Get
type ProxyClientMockGetResults struct {
	b1  repository.Blob
	err error
}

// Expect sets up expected params for ProxyClient.Get
func (mmGet *mProxyClientMockGet) Expect(m1 coordinates.Module) *mProxyClientMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("ProxyClientMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &ProxyClientMockGetExpectation{}
	}

	mmGet.defaultExpectation.params = &ProxyClientMockGetParams{m1}
	for _, e := range mmGet.expectations {
		if minimock.Equal(e.params, mmGet.defaultExpectation.params) {
			mmGet.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGet.defaultExpectation.params)
		}
	}

	return mmGet
}

// Inspect accepts an inspector function that has same arguments as the ProxyClient.Get
func (mmGet *mProxyClientMockGet) Inspect(f func(m1 coordinates.Module)) *mProxyClientMockGet {
	if mmGet.mock.inspectFuncGet != nil {
		mmGet.mock.t.Fatalf("Inspect function is already set for ProxyClientMock.Get")
	}

	mmGet.mock.inspectFuncGet = f

	return mmGet
}

// Return sets up results that will be returned by ProxyClient.Get
func (mmGet *mProxyClientMockGet) Return(b1 repository.Blob, err error) *ProxyClientMock {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("ProxyClientMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &ProxyClientMockGetExpectation{mock: mmGet.mock}
	}
	mmGet.defaultExpectation.results = &ProxyClientMockGetResults{b1, err}
	return mmGet.mock
}

//Set uses given function f to mock the ProxyClient.Get method
func (mmGet *mProxyClientMockGet) Set(f func(m1 coordinates.Module) (b1 repository.Blob, err error)) *ProxyClientMock {
	if mmGet.defaultExpectation != nil {
		mmGet.mock.t.Fatalf("Default expectation is already set for the ProxyClient.Get method")
	}

	if len(mmGet.expectations) > 0 {
		mmGet.mock.t.Fatalf("Some expectations are already set for the ProxyClient.Get method")
	}

	mmGet.mock.funcGet = f
	return mmGet.mock
}

// When sets expectation for the ProxyClient.Get which will trigger the result defined by the following
// Then helper
func (mmGet *mProxyClientMockGet) When(m1 coordinates.Module) *ProxyClientMockGetExpectation {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("ProxyClientMock.Get mock is already set by Set")
	}

	expectation := &ProxyClientMockGetExpectation{
		mock:   mmGet.mock,
		params: &ProxyClientMockGetParams{m1},
	}
	mmGet.expectations = append(mmGet.expectations, expectation)
	return expectation
}

// Then sets up ProxyClient.Get return parameters for the expectation previously defined by the When method
func (e *ProxyClientMockGetExpectation) Then(b1 repository.Blob, err error) *ProxyClientMock {
	e.results = &ProxyClientMockGetResults{b1, err}
	return e.mock
}

// Get implements ProxyClient
func (mmGet *ProxyClientMock) Get(m1 coordinates.Module) (b1 repository.Blob, err error) {
	mm_atomic.AddUint64(&mmGet.beforeGetCounter, 1)
	defer mm_atomic.AddUint64(&mmGet.afterGetCounter, 1)

	if mmGet.inspectFuncGet != nil {
		mmGet.inspectFuncGet(m1)
	}

	params := &ProxyClientMockGetParams{m1}

	// Record call args
	mmGet.GetMock.mutex.Lock()
	mmGet.GetMock.callArgs = append(mmGet.GetMock.callArgs, params)
	mmGet.GetMock.mutex.Unlock()

	for _, e := range mmGet.GetMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.b1, e.results.err
		}
	}

	if mmGet.GetMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGet.GetMock.defaultExpectation.Counter, 1)
		want := mmGet.GetMock.defaultExpectation.params
		got := ProxyClientMockGetParams{m1}
		if want != nil && !minimock.Equal(*want, got) {
			mmGet.t.Errorf("ProxyClientMock.Get got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := mmGet.GetMock.defaultExpectation.results
		if results == nil {
			mmGet.t.Fatal("No results are set for the ProxyClientMock.Get")
		}
		return (*results).b1, (*results).err
	}
	if mmGet.funcGet != nil {
		return mmGet.funcGet(m1)
	}
	mmGet.t.Fatalf("Unexpected call to ProxyClientMock.Get. %v", m1)
	return
}

// GetAfterCounter returns a count of finished ProxyClientMock.Get invocations
func (mmGet *ProxyClientMock) GetAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.afterGetCounter)
}

// GetBeforeCounter returns a count of ProxyClientMock.Get invocations
func (mmGet *ProxyClientMock) GetBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.beforeGetCounter)
}

// Calls returns a list of arguments used in each call to ProxyClientMock.Get.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGet *mProxyClientMockGet) Calls() []*ProxyClientMockGetParams {
	mmGet.mutex.RLock()

	argCopy := make([]*ProxyClientMockGetParams, len(mmGet.callArgs))
	copy(argCopy, mmGet.callArgs)

	mmGet.mutex.RUnlock()

	return argCopy
}

// MinimockGetDone returns true if the count of the Get invocations corresponds
// the number of defined expectations
func (m *ProxyClientMock) MinimockGetDone() bool {
	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGet != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetInspect logs each unmet expectation
func (m *ProxyClientMock) MinimockGetInspect() {
	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ProxyClientMock.Get with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		if m.GetMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ProxyClientMock.Get")
		} else {
			m.t.Errorf("Expected call to ProxyClientMock.Get with params: %#v", *m.GetMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGet != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		m.t.Error("Expected call to ProxyClientMock.Get")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ProxyClientMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ProxyClientMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ProxyClientMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetDone()
}
