package finder

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// FinderMock implements Finder
type FinderMock struct {
	t minimock.Tester

	funcFind          func(s1 string) (rp1 *Result, err error)
	inspectFuncFind   func(s1 string)
	afterFindCounter  uint64
	beforeFindCounter uint64
	FindMock          mFinderMockFind
}

// NewFinderMock returns a mock for Finder
func NewFinderMock(t minimock.Tester) *FinderMock {
	m := &FinderMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.FindMock = mFinderMockFind{mock: m}
	m.FindMock.callArgs = []*FinderMockFindParams{}

	return m
}

type mFinderMockFind struct {
	mock               *FinderMock
	defaultExpectation *FinderMockFindExpectation
	expectations       []*FinderMockFindExpectation

	callArgs []*FinderMockFindParams
	mutex    sync.RWMutex
}

// FinderMockFindExpectation specifies expectation struct of the Finder.Find
type FinderMockFindExpectation struct {
	mock    *FinderMock
	params  *FinderMockFindParams
	results *FinderMockFindResults
	Counter uint64
}

// FinderMockFindParams contains parameters of the Finder.Find
type FinderMockFindParams struct {
	s1 string
}

// FinderMockFindResults contains results of the Finder.Find
type FinderMockFindResults struct {
	rp1 *Result
	err error
}

// Expect sets up expected params for Finder.Find
func (mmFind *mFinderMockFind) Expect(s1 string) *mFinderMockFind {
	if mmFind.mock.funcFind != nil {
		mmFind.mock.t.Fatalf("FinderMock.Find mock is already set by Set")
	}

	if mmFind.defaultExpectation == nil {
		mmFind.defaultExpectation = &FinderMockFindExpectation{}
	}

	mmFind.defaultExpectation.params = &FinderMockFindParams{s1}
	for _, e := range mmFind.expectations {
		if minimock.Equal(e.params, mmFind.defaultExpectation.params) {
			mmFind.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmFind.defaultExpectation.params)
		}
	}

	return mmFind
}

// Inspect accepts an inspector function that has same arguments as the Finder.Find
func (mmFind *mFinderMockFind) Inspect(f func(s1 string)) *mFinderMockFind {
	if mmFind.mock.inspectFuncFind != nil {
		mmFind.mock.t.Fatalf("Inspect function is already set for FinderMock.Find")
	}

	mmFind.mock.inspectFuncFind = f

	return mmFind
}

// Return sets up results that will be returned by Finder.Find
func (mmFind *mFinderMockFind) Return(rp1 *Result, err error) *FinderMock {
	if mmFind.mock.funcFind != nil {
		mmFind.mock.t.Fatalf("FinderMock.Find mock is already set by Set")
	}

	if mmFind.defaultExpectation == nil {
		mmFind.defaultExpectation = &FinderMockFindExpectation{mock: mmFind.mock}
	}
	mmFind.defaultExpectation.results = &FinderMockFindResults{rp1, err}
	return mmFind.mock
}

//Set uses given function f to mock the Finder.Find method
func (mmFind *mFinderMockFind) Set(f func(s1 string) (rp1 *Result, err error)) *FinderMock {
	if mmFind.defaultExpectation != nil {
		mmFind.mock.t.Fatalf("Default expectation is already set for the Finder.Find method")
	}

	if len(mmFind.expectations) > 0 {
		mmFind.mock.t.Fatalf("Some expectations are already set for the Finder.Find method")
	}

	mmFind.mock.funcFind = f
	return mmFind.mock
}

// When sets expectation for the Finder.Find which will trigger the result defined by the following
// Then helper
func (mmFind *mFinderMockFind) When(s1 string) *FinderMockFindExpectation {
	if mmFind.mock.funcFind != nil {
		mmFind.mock.t.Fatalf("FinderMock.Find mock is already set by Set")
	}

	expectation := &FinderMockFindExpectation{
		mock:   mmFind.mock,
		params: &FinderMockFindParams{s1},
	}
	mmFind.expectations = append(mmFind.expectations, expectation)
	return expectation
}

// Then sets up Finder.Find return parameters for the expectation previously defined by the When method
func (e *FinderMockFindExpectation) Then(rp1 *Result, err error) *FinderMock {
	e.results = &FinderMockFindResults{rp1, err}
	return e.mock
}

// Find implements Finder
func (mmFind *FinderMock) Find(s1 string) (rp1 *Result, err error) {
	mm_atomic.AddUint64(&mmFind.beforeFindCounter, 1)
	defer mm_atomic.AddUint64(&mmFind.afterFindCounter, 1)

	if mmFind.inspectFuncFind != nil {
		mmFind.inspectFuncFind(s1)
	}

	mm_params := &FinderMockFindParams{s1}

	// Record call args
	mmFind.FindMock.mutex.Lock()
	mmFind.FindMock.callArgs = append(mmFind.FindMock.callArgs, mm_params)
	mmFind.FindMock.mutex.Unlock()

	for _, e := range mmFind.FindMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.rp1, e.results.err
		}
	}

	if mmFind.FindMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmFind.FindMock.defaultExpectation.Counter, 1)
		mm_want := mmFind.FindMock.defaultExpectation.params
		mm_got := FinderMockFindParams{s1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmFind.t.Errorf("FinderMock.Find got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmFind.FindMock.defaultExpectation.results
		if mm_results == nil {
			mmFind.t.Fatal("No results are set for the FinderMock.Find")
		}
		return (*mm_results).rp1, (*mm_results).err
	}
	if mmFind.funcFind != nil {
		return mmFind.funcFind(s1)
	}
	mmFind.t.Fatalf("Unexpected call to FinderMock.Find. %v", s1)
	return
}

// FindAfterCounter returns a count of finished FinderMock.Find invocations
func (mmFind *FinderMock) FindAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmFind.afterFindCounter)
}

// FindBeforeCounter returns a count of FinderMock.Find invocations
func (mmFind *FinderMock) FindBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmFind.beforeFindCounter)
}

// Calls returns a list of arguments used in each call to FinderMock.Find.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmFind *mFinderMockFind) Calls() []*FinderMockFindParams {
	mmFind.mutex.RLock()

	argCopy := make([]*FinderMockFindParams, len(mmFind.callArgs))
	copy(argCopy, mmFind.callArgs)

	mmFind.mutex.RUnlock()

	return argCopy
}

// MinimockFindDone returns true if the count of the Find invocations corresponds
// the number of defined expectations
func (m *FinderMock) MinimockFindDone() bool {
	for _, e := range m.FindMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.FindMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterFindCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcFind != nil && mm_atomic.LoadUint64(&m.afterFindCounter) < 1 {
		return false
	}
	return true
}

// MinimockFindInspect logs each unmet expectation
func (m *FinderMock) MinimockFindInspect() {
	for _, e := range m.FindMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to FinderMock.Find with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.FindMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterFindCounter) < 1 {
		if m.FindMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to FinderMock.Find")
		} else {
			m.t.Errorf("Expected call to FinderMock.Find with params: %#v", *m.FindMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcFind != nil && mm_atomic.LoadUint64(&m.afterFindCounter) < 1 {
		m.t.Error("Expected call to FinderMock.Find")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *FinderMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockFindInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *FinderMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *FinderMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockFindDone()
}
