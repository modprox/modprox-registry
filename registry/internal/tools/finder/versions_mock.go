package finder

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock"
)

// VersionsMock implements Versions
type VersionsMock struct {
	t minimock.Tester

	funcRequest          func(source string) (rp1 *Result, err error)
	afterRequestCounter  uint64
	beforeRequestCounter uint64
	RequestMock          mVersionsMockRequest
}

// NewVersionsMock returns a mock for Versions
func NewVersionsMock(t minimock.Tester) *VersionsMock {
	m := &VersionsMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}
	m.RequestMock = mVersionsMockRequest{mock: m}

	return m
}

type mVersionsMockRequest struct {
	mock               *VersionsMock
	defaultExpectation *VersionsMockRequestExpectation
	expectations       []*VersionsMockRequestExpectation
}

// VersionsMockRequestExpectation specifies expectation struct of the Versions.Request
type VersionsMockRequestExpectation struct {
	mock    *VersionsMock
	params  *VersionsMockRequestParams
	results *VersionsMockRequestResults
	Counter uint64
}

// VersionsMockRequestParams contains parameters of the Versions.Request
type VersionsMockRequestParams struct {
	source string
}

// VersionsMockRequestResults contains results of the Versions.Request
type VersionsMockRequestResults struct {
	rp1 *Result
	err error
}

// Expect sets up expected params for Versions.Request
func (m *mVersionsMockRequest) Expect(source string) *mVersionsMockRequest {
	if m.mock.funcRequest != nil {
		m.mock.t.Fatalf("VersionsMock.Request mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &VersionsMockRequestExpectation{}
	}

	m.defaultExpectation.params = &VersionsMockRequestParams{source}
	for _, e := range m.expectations {
		if minimock.Equal(e.params, m.defaultExpectation.params) {
			m.mock.t.Fatalf("Expectation set by When has same params: %#v", *m.defaultExpectation.params)
		}
	}

	return m
}

// Return sets up results that will be returned by Versions.Request
func (m *mVersionsMockRequest) Return(rp1 *Result, err error) *VersionsMock {
	if m.mock.funcRequest != nil {
		m.mock.t.Fatalf("VersionsMock.Request mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &VersionsMockRequestExpectation{mock: m.mock}
	}
	m.defaultExpectation.results = &VersionsMockRequestResults{rp1, err}
	return m.mock
}

//Set uses given function f to mock the Versions.Request method
func (m *mVersionsMockRequest) Set(f func(source string) (rp1 *Result, err error)) *VersionsMock {
	if m.defaultExpectation != nil {
		m.mock.t.Fatalf("Default expectation is already set for the Versions.Request method")
	}

	if len(m.expectations) > 0 {
		m.mock.t.Fatalf("Some expectations are already set for the Versions.Request method")
	}

	m.mock.funcRequest = f
	return m.mock
}

// When sets expectation for the Versions.Request which will trigger the result defined by the following
// Then helper
func (m *mVersionsMockRequest) When(source string) *VersionsMockRequestExpectation {
	if m.mock.funcRequest != nil {
		m.mock.t.Fatalf("VersionsMock.Request mock is already set by Set")
	}

	expectation := &VersionsMockRequestExpectation{
		mock:   m.mock,
		params: &VersionsMockRequestParams{source},
	}
	m.expectations = append(m.expectations, expectation)
	return expectation
}

// Then sets up Versions.Request return parameters for the expectation previously defined by the When method
func (e *VersionsMockRequestExpectation) Then(rp1 *Result, err error) *VersionsMock {
	e.results = &VersionsMockRequestResults{rp1, err}
	return e.mock
}

// Request implements Versions
func (m *VersionsMock) Request(source string) (rp1 *Result, err error) {
	mm_atomic.AddUint64(&m.beforeRequestCounter, 1)
	defer mm_atomic.AddUint64(&m.afterRequestCounter, 1)

	for _, e := range m.RequestMock.expectations {
		if minimock.Equal(*e.params, VersionsMockRequestParams{source}) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.rp1, e.results.err
		}
	}

	if m.RequestMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&m.RequestMock.defaultExpectation.Counter, 1)
		want := m.RequestMock.defaultExpectation.params
		got := VersionsMockRequestParams{source}
		if want != nil && !minimock.Equal(*want, got) {
			m.t.Errorf("VersionsMock.Request got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := m.RequestMock.defaultExpectation.results
		if results == nil {
			m.t.Fatal("No results are set for the VersionsMock.Request")
		}
		return (*results).rp1, (*results).err
	}
	if m.funcRequest != nil {
		return m.funcRequest(source)
	}
	m.t.Fatalf("Unexpected call to VersionsMock.Request. %v", source)
	return
}

// RequestAfterCounter returns a count of finished VersionsMock.Request invocations
func (m *VersionsMock) RequestAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&m.afterRequestCounter)
}

// RequestBeforeCounter returns a count of VersionsMock.Request invocations
func (m *VersionsMock) RequestBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&m.beforeRequestCounter)
}

// MinimockRequestDone returns true if the count of the Request invocations corresponds
// the number of defined expectations
func (m *VersionsMock) MinimockRequestDone() bool {
	for _, e := range m.RequestMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.RequestMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterRequestCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRequest != nil && mm_atomic.LoadUint64(&m.afterRequestCounter) < 1 {
		return false
	}
	return true
}

// MinimockRequestInspect logs each unmet expectation
func (m *VersionsMock) MinimockRequestInspect() {
	for _, e := range m.RequestMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to VersionsMock.Request with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.RequestMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterRequestCounter) < 1 {
		m.t.Errorf("Expected call to VersionsMock.Request with params: %#v", *m.RequestMock.defaultExpectation.params)
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRequest != nil && mm_atomic.LoadUint64(&m.afterRequestCounter) < 1 {
		m.t.Error("Expected call to VersionsMock.Request")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *VersionsMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockRequestInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *VersionsMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *VersionsMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockRequestDone()
}
