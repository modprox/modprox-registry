package data

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock"
	"oss.indeed.com/go/modprox/pkg/clients/payloads"
	"oss.indeed.com/go/modprox/pkg/coordinates"
	"oss.indeed.com/go/modprox/pkg/netservice"
)

// StoreMock implements Store
type StoreMock struct {
	t minimock.Tester

	funcDeleteModuleByID          func(id int) (err error)
	afterDeleteModuleByIDCounter  uint64
	beforeDeleteModuleByIDCounter uint64
	DeleteModuleByIDMock          mStoreMockDeleteModuleByID

	funcInsertModules          func(ma1 []coordinates.Module) (i1 int, err error)
	afterInsertModulesCounter  uint64
	beforeInsertModulesCounter uint64
	InsertModulesMock          mStoreMockInsertModules

	funcListHeartbeats          func() (ha1 []payloads.Heartbeat, err error)
	afterListHeartbeatsCounter  uint64
	beforeListHeartbeatsCounter uint64
	ListHeartbeatsMock          mStoreMockListHeartbeats

	funcListModuleIDs          func() (ia1 []int64, err error)
	afterListModuleIDsCounter  uint64
	beforeListModuleIDsCounter uint64
	ListModuleIDsMock          mStoreMockListModuleIDs

	funcListModules          func() (sa1 []coordinates.SerialModule, err error)
	afterListModulesCounter  uint64
	beforeListModulesCounter uint64
	ListModulesMock          mStoreMockListModules

	funcListModulesByIDs          func(ids []int64) (sa1 []coordinates.SerialModule, err error)
	afterListModulesByIDsCounter  uint64
	beforeListModulesByIDsCounter uint64
	ListModulesByIDsMock          mStoreMockListModulesByIDs

	funcListModulesBySource          func(source string) (sa1 []coordinates.SerialModule, err error)
	afterListModulesBySourceCounter  uint64
	beforeListModulesBySourceCounter uint64
	ListModulesBySourceMock          mStoreMockListModulesBySource

	funcListStartConfigs          func() (ca1 []payloads.Configuration, err error)
	afterListStartConfigsCounter  uint64
	beforeListStartConfigsCounter uint64
	ListStartConfigsMock          mStoreMockListStartConfigs

	funcPurgeProxy          func(instance netservice.Instance) (err error)
	afterPurgeProxyCounter  uint64
	beforePurgeProxyCounter uint64
	PurgeProxyMock          mStoreMockPurgeProxy

	funcSetHeartbeat          func(h1 payloads.Heartbeat) (err error)
	afterSetHeartbeatCounter  uint64
	beforeSetHeartbeatCounter uint64
	SetHeartbeatMock          mStoreMockSetHeartbeat

	funcSetStartConfig          func(c1 payloads.Configuration) (err error)
	afterSetStartConfigCounter  uint64
	beforeSetStartConfigCounter uint64
	SetStartConfigMock          mStoreMockSetStartConfig
}

// NewStoreMock returns a mock for Store
func NewStoreMock(t minimock.Tester) *StoreMock {
	m := &StoreMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}
	m.DeleteModuleByIDMock = mStoreMockDeleteModuleByID{mock: m}
	m.InsertModulesMock = mStoreMockInsertModules{mock: m}
	m.ListHeartbeatsMock = mStoreMockListHeartbeats{mock: m}
	m.ListModuleIDsMock = mStoreMockListModuleIDs{mock: m}
	m.ListModulesMock = mStoreMockListModules{mock: m}
	m.ListModulesByIDsMock = mStoreMockListModulesByIDs{mock: m}
	m.ListModulesBySourceMock = mStoreMockListModulesBySource{mock: m}
	m.ListStartConfigsMock = mStoreMockListStartConfigs{mock: m}
	m.PurgeProxyMock = mStoreMockPurgeProxy{mock: m}
	m.SetHeartbeatMock = mStoreMockSetHeartbeat{mock: m}
	m.SetStartConfigMock = mStoreMockSetStartConfig{mock: m}

	return m
}

type mStoreMockDeleteModuleByID struct {
	mock               *StoreMock
	defaultExpectation *StoreMockDeleteModuleByIDExpectation
	expectations       []*StoreMockDeleteModuleByIDExpectation
}

// StoreMockDeleteModuleByIDExpectation specifies expectation struct of the Store.DeleteModuleByID
type StoreMockDeleteModuleByIDExpectation struct {
	mock    *StoreMock
	params  *StoreMockDeleteModuleByIDParams
	results *StoreMockDeleteModuleByIDResults
	Counter uint64
}

// StoreMockDeleteModuleByIDParams contains parameters of the Store.DeleteModuleByID
type StoreMockDeleteModuleByIDParams struct {
	id int
}

// StoreMockDeleteModuleByIDResults contains results of the Store.DeleteModuleByID
type StoreMockDeleteModuleByIDResults struct {
	err error
}

// Expect sets up expected params for Store.DeleteModuleByID
func (m *mStoreMockDeleteModuleByID) Expect(id int) *mStoreMockDeleteModuleByID {
	if m.mock.funcDeleteModuleByID != nil {
		m.mock.t.Fatalf("StoreMock.DeleteModuleByID mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &StoreMockDeleteModuleByIDExpectation{}
	}

	m.defaultExpectation.params = &StoreMockDeleteModuleByIDParams{id}
	for _, e := range m.expectations {
		if minimock.Equal(e.params, m.defaultExpectation.params) {
			m.mock.t.Fatalf("Expectation set by When has same params: %#v", *m.defaultExpectation.params)
		}
	}

	return m
}

// Return sets up results that will be returned by Store.DeleteModuleByID
func (m *mStoreMockDeleteModuleByID) Return(err error) *StoreMock {
	if m.mock.funcDeleteModuleByID != nil {
		m.mock.t.Fatalf("StoreMock.DeleteModuleByID mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &StoreMockDeleteModuleByIDExpectation{mock: m.mock}
	}
	m.defaultExpectation.results = &StoreMockDeleteModuleByIDResults{err}
	return m.mock
}

//Set uses given function f to mock the Store.DeleteModuleByID method
func (m *mStoreMockDeleteModuleByID) Set(f func(id int) (err error)) *StoreMock {
	if m.defaultExpectation != nil {
		m.mock.t.Fatalf("Default expectation is already set for the Store.DeleteModuleByID method")
	}

	if len(m.expectations) > 0 {
		m.mock.t.Fatalf("Some expectations are already set for the Store.DeleteModuleByID method")
	}

	m.mock.funcDeleteModuleByID = f
	return m.mock
}

// When sets expectation for the Store.DeleteModuleByID which will trigger the result defined by the following
// Then helper
func (m *mStoreMockDeleteModuleByID) When(id int) *StoreMockDeleteModuleByIDExpectation {
	if m.mock.funcDeleteModuleByID != nil {
		m.mock.t.Fatalf("StoreMock.DeleteModuleByID mock is already set by Set")
	}

	expectation := &StoreMockDeleteModuleByIDExpectation{
		mock:   m.mock,
		params: &StoreMockDeleteModuleByIDParams{id},
	}
	m.expectations = append(m.expectations, expectation)
	return expectation
}

// Then sets up Store.DeleteModuleByID return parameters for the expectation previously defined by the When method
func (e *StoreMockDeleteModuleByIDExpectation) Then(err error) *StoreMock {
	e.results = &StoreMockDeleteModuleByIDResults{err}
	return e.mock
}

// DeleteModuleByID implements Store
func (m *StoreMock) DeleteModuleByID(id int) (err error) {
	mm_atomic.AddUint64(&m.beforeDeleteModuleByIDCounter, 1)
	defer mm_atomic.AddUint64(&m.afterDeleteModuleByIDCounter, 1)

	for _, e := range m.DeleteModuleByIDMock.expectations {
		if minimock.Equal(*e.params, StoreMockDeleteModuleByIDParams{id}) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if m.DeleteModuleByIDMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&m.DeleteModuleByIDMock.defaultExpectation.Counter, 1)
		want := m.DeleteModuleByIDMock.defaultExpectation.params
		got := StoreMockDeleteModuleByIDParams{id}
		if want != nil && !minimock.Equal(*want, got) {
			m.t.Errorf("StoreMock.DeleteModuleByID got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := m.DeleteModuleByIDMock.defaultExpectation.results
		if results == nil {
			m.t.Fatal("No results are set for the StoreMock.DeleteModuleByID")
		}
		return (*results).err
	}
	if m.funcDeleteModuleByID != nil {
		return m.funcDeleteModuleByID(id)
	}
	m.t.Fatalf("Unexpected call to StoreMock.DeleteModuleByID. %v", id)
	return
}

// DeleteModuleByIDAfterCounter returns a count of finished StoreMock.DeleteModuleByID invocations
func (m *StoreMock) DeleteModuleByIDAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&m.afterDeleteModuleByIDCounter)
}

// DeleteModuleByIDBeforeCounter returns a count of StoreMock.DeleteModuleByID invocations
func (m *StoreMock) DeleteModuleByIDBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&m.beforeDeleteModuleByIDCounter)
}

// MinimockDeleteModuleByIDDone returns true if the count of the DeleteModuleByID invocations corresponds
// the number of defined expectations
func (m *StoreMock) MinimockDeleteModuleByIDDone() bool {
	for _, e := range m.DeleteModuleByIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteModuleByIDMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDeleteModuleByIDCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDeleteModuleByID != nil && mm_atomic.LoadUint64(&m.afterDeleteModuleByIDCounter) < 1 {
		return false
	}
	return true
}

// MinimockDeleteModuleByIDInspect logs each unmet expectation
func (m *StoreMock) MinimockDeleteModuleByIDInspect() {
	for _, e := range m.DeleteModuleByIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to StoreMock.DeleteModuleByID with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteModuleByIDMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDeleteModuleByIDCounter) < 1 {
		if m.DeleteModuleByIDMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to StoreMock.DeleteModuleByID")
		} else {
			m.t.Errorf("Expected call to StoreMock.DeleteModuleByID with params: %#v", *m.DeleteModuleByIDMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDeleteModuleByID != nil && mm_atomic.LoadUint64(&m.afterDeleteModuleByIDCounter) < 1 {
		m.t.Error("Expected call to StoreMock.DeleteModuleByID")
	}
}

type mStoreMockInsertModules struct {
	mock               *StoreMock
	defaultExpectation *StoreMockInsertModulesExpectation
	expectations       []*StoreMockInsertModulesExpectation
}

// StoreMockInsertModulesExpectation specifies expectation struct of the Store.InsertModules
type StoreMockInsertModulesExpectation struct {
	mock    *StoreMock
	params  *StoreMockInsertModulesParams
	results *StoreMockInsertModulesResults
	Counter uint64
}

// StoreMockInsertModulesParams contains parameters of the Store.InsertModules
type StoreMockInsertModulesParams struct {
	ma1 []coordinates.Module
}

// StoreMockInsertModulesResults contains results of the Store.InsertModules
type StoreMockInsertModulesResults struct {
	i1  int
	err error
}

// Expect sets up expected params for Store.InsertModules
func (m *mStoreMockInsertModules) Expect(ma1 []coordinates.Module) *mStoreMockInsertModules {
	if m.mock.funcInsertModules != nil {
		m.mock.t.Fatalf("StoreMock.InsertModules mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &StoreMockInsertModulesExpectation{}
	}

	m.defaultExpectation.params = &StoreMockInsertModulesParams{ma1}
	for _, e := range m.expectations {
		if minimock.Equal(e.params, m.defaultExpectation.params) {
			m.mock.t.Fatalf("Expectation set by When has same params: %#v", *m.defaultExpectation.params)
		}
	}

	return m
}

// Return sets up results that will be returned by Store.InsertModules
func (m *mStoreMockInsertModules) Return(i1 int, err error) *StoreMock {
	if m.mock.funcInsertModules != nil {
		m.mock.t.Fatalf("StoreMock.InsertModules mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &StoreMockInsertModulesExpectation{mock: m.mock}
	}
	m.defaultExpectation.results = &StoreMockInsertModulesResults{i1, err}
	return m.mock
}

//Set uses given function f to mock the Store.InsertModules method
func (m *mStoreMockInsertModules) Set(f func(ma1 []coordinates.Module) (i1 int, err error)) *StoreMock {
	if m.defaultExpectation != nil {
		m.mock.t.Fatalf("Default expectation is already set for the Store.InsertModules method")
	}

	if len(m.expectations) > 0 {
		m.mock.t.Fatalf("Some expectations are already set for the Store.InsertModules method")
	}

	m.mock.funcInsertModules = f
	return m.mock
}

// When sets expectation for the Store.InsertModules which will trigger the result defined by the following
// Then helper
func (m *mStoreMockInsertModules) When(ma1 []coordinates.Module) *StoreMockInsertModulesExpectation {
	if m.mock.funcInsertModules != nil {
		m.mock.t.Fatalf("StoreMock.InsertModules mock is already set by Set")
	}

	expectation := &StoreMockInsertModulesExpectation{
		mock:   m.mock,
		params: &StoreMockInsertModulesParams{ma1},
	}
	m.expectations = append(m.expectations, expectation)
	return expectation
}

// Then sets up Store.InsertModules return parameters for the expectation previously defined by the When method
func (e *StoreMockInsertModulesExpectation) Then(i1 int, err error) *StoreMock {
	e.results = &StoreMockInsertModulesResults{i1, err}
	return e.mock
}

// InsertModules implements Store
func (m *StoreMock) InsertModules(ma1 []coordinates.Module) (i1 int, err error) {
	mm_atomic.AddUint64(&m.beforeInsertModulesCounter, 1)
	defer mm_atomic.AddUint64(&m.afterInsertModulesCounter, 1)

	for _, e := range m.InsertModulesMock.expectations {
		if minimock.Equal(*e.params, StoreMockInsertModulesParams{ma1}) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if m.InsertModulesMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&m.InsertModulesMock.defaultExpectation.Counter, 1)
		want := m.InsertModulesMock.defaultExpectation.params
		got := StoreMockInsertModulesParams{ma1}
		if want != nil && !minimock.Equal(*want, got) {
			m.t.Errorf("StoreMock.InsertModules got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := m.InsertModulesMock.defaultExpectation.results
		if results == nil {
			m.t.Fatal("No results are set for the StoreMock.InsertModules")
		}
		return (*results).i1, (*results).err
	}
	if m.funcInsertModules != nil {
		return m.funcInsertModules(ma1)
	}
	m.t.Fatalf("Unexpected call to StoreMock.InsertModules. %v", ma1)
	return
}

// InsertModulesAfterCounter returns a count of finished StoreMock.InsertModules invocations
func (m *StoreMock) InsertModulesAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&m.afterInsertModulesCounter)
}

// InsertModulesBeforeCounter returns a count of StoreMock.InsertModules invocations
func (m *StoreMock) InsertModulesBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&m.beforeInsertModulesCounter)
}

// MinimockInsertModulesDone returns true if the count of the InsertModules invocations corresponds
// the number of defined expectations
func (m *StoreMock) MinimockInsertModulesDone() bool {
	for _, e := range m.InsertModulesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.InsertModulesMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterInsertModulesCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcInsertModules != nil && mm_atomic.LoadUint64(&m.afterInsertModulesCounter) < 1 {
		return false
	}
	return true
}

// MinimockInsertModulesInspect logs each unmet expectation
func (m *StoreMock) MinimockInsertModulesInspect() {
	for _, e := range m.InsertModulesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to StoreMock.InsertModules with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.InsertModulesMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterInsertModulesCounter) < 1 {
		if m.InsertModulesMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to StoreMock.InsertModules")
		} else {
			m.t.Errorf("Expected call to StoreMock.InsertModules with params: %#v", *m.InsertModulesMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcInsertModules != nil && mm_atomic.LoadUint64(&m.afterInsertModulesCounter) < 1 {
		m.t.Error("Expected call to StoreMock.InsertModules")
	}
}

type mStoreMockListHeartbeats struct {
	mock               *StoreMock
	defaultExpectation *StoreMockListHeartbeatsExpectation
	expectations       []*StoreMockListHeartbeatsExpectation
}

// StoreMockListHeartbeatsExpectation specifies expectation struct of the Store.ListHeartbeats
type StoreMockListHeartbeatsExpectation struct {
	mock *StoreMock

	results *StoreMockListHeartbeatsResults
	Counter uint64
}

// StoreMockListHeartbeatsResults contains results of the Store.ListHeartbeats
type StoreMockListHeartbeatsResults struct {
	ha1 []payloads.Heartbeat
	err error
}

// Expect sets up expected params for Store.ListHeartbeats
func (m *mStoreMockListHeartbeats) Expect() *mStoreMockListHeartbeats {
	if m.mock.funcListHeartbeats != nil {
		m.mock.t.Fatalf("StoreMock.ListHeartbeats mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &StoreMockListHeartbeatsExpectation{}
	}

	return m
}

// Return sets up results that will be returned by Store.ListHeartbeats
func (m *mStoreMockListHeartbeats) Return(ha1 []payloads.Heartbeat, err error) *StoreMock {
	if m.mock.funcListHeartbeats != nil {
		m.mock.t.Fatalf("StoreMock.ListHeartbeats mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &StoreMockListHeartbeatsExpectation{mock: m.mock}
	}
	m.defaultExpectation.results = &StoreMockListHeartbeatsResults{ha1, err}
	return m.mock
}

//Set uses given function f to mock the Store.ListHeartbeats method
func (m *mStoreMockListHeartbeats) Set(f func() (ha1 []payloads.Heartbeat, err error)) *StoreMock {
	if m.defaultExpectation != nil {
		m.mock.t.Fatalf("Default expectation is already set for the Store.ListHeartbeats method")
	}

	if len(m.expectations) > 0 {
		m.mock.t.Fatalf("Some expectations are already set for the Store.ListHeartbeats method")
	}

	m.mock.funcListHeartbeats = f
	return m.mock
}

// ListHeartbeats implements Store
func (m *StoreMock) ListHeartbeats() (ha1 []payloads.Heartbeat, err error) {
	mm_atomic.AddUint64(&m.beforeListHeartbeatsCounter, 1)
	defer mm_atomic.AddUint64(&m.afterListHeartbeatsCounter, 1)

	if m.ListHeartbeatsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&m.ListHeartbeatsMock.defaultExpectation.Counter, 1)

		results := m.ListHeartbeatsMock.defaultExpectation.results
		if results == nil {
			m.t.Fatal("No results are set for the StoreMock.ListHeartbeats")
		}
		return (*results).ha1, (*results).err
	}
	if m.funcListHeartbeats != nil {
		return m.funcListHeartbeats()
	}
	m.t.Fatalf("Unexpected call to StoreMock.ListHeartbeats.")
	return
}

// ListHeartbeatsAfterCounter returns a count of finished StoreMock.ListHeartbeats invocations
func (m *StoreMock) ListHeartbeatsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&m.afterListHeartbeatsCounter)
}

// ListHeartbeatsBeforeCounter returns a count of StoreMock.ListHeartbeats invocations
func (m *StoreMock) ListHeartbeatsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&m.beforeListHeartbeatsCounter)
}

// MinimockListHeartbeatsDone returns true if the count of the ListHeartbeats invocations corresponds
// the number of defined expectations
func (m *StoreMock) MinimockListHeartbeatsDone() bool {
	for _, e := range m.ListHeartbeatsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ListHeartbeatsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterListHeartbeatsCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcListHeartbeats != nil && mm_atomic.LoadUint64(&m.afterListHeartbeatsCounter) < 1 {
		return false
	}
	return true
}

// MinimockListHeartbeatsInspect logs each unmet expectation
func (m *StoreMock) MinimockListHeartbeatsInspect() {
	for _, e := range m.ListHeartbeatsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to StoreMock.ListHeartbeats")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ListHeartbeatsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterListHeartbeatsCounter) < 1 {
		m.t.Error("Expected call to StoreMock.ListHeartbeats")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcListHeartbeats != nil && mm_atomic.LoadUint64(&m.afterListHeartbeatsCounter) < 1 {
		m.t.Error("Expected call to StoreMock.ListHeartbeats")
	}
}

type mStoreMockListModuleIDs struct {
	mock               *StoreMock
	defaultExpectation *StoreMockListModuleIDsExpectation
	expectations       []*StoreMockListModuleIDsExpectation
}

// StoreMockListModuleIDsExpectation specifies expectation struct of the Store.ListModuleIDs
type StoreMockListModuleIDsExpectation struct {
	mock *StoreMock

	results *StoreMockListModuleIDsResults
	Counter uint64
}

// StoreMockListModuleIDsResults contains results of the Store.ListModuleIDs
type StoreMockListModuleIDsResults struct {
	ia1 []int64
	err error
}

// Expect sets up expected params for Store.ListModuleIDs
func (m *mStoreMockListModuleIDs) Expect() *mStoreMockListModuleIDs {
	if m.mock.funcListModuleIDs != nil {
		m.mock.t.Fatalf("StoreMock.ListModuleIDs mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &StoreMockListModuleIDsExpectation{}
	}

	return m
}

// Return sets up results that will be returned by Store.ListModuleIDs
func (m *mStoreMockListModuleIDs) Return(ia1 []int64, err error) *StoreMock {
	if m.mock.funcListModuleIDs != nil {
		m.mock.t.Fatalf("StoreMock.ListModuleIDs mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &StoreMockListModuleIDsExpectation{mock: m.mock}
	}
	m.defaultExpectation.results = &StoreMockListModuleIDsResults{ia1, err}
	return m.mock
}

//Set uses given function f to mock the Store.ListModuleIDs method
func (m *mStoreMockListModuleIDs) Set(f func() (ia1 []int64, err error)) *StoreMock {
	if m.defaultExpectation != nil {
		m.mock.t.Fatalf("Default expectation is already set for the Store.ListModuleIDs method")
	}

	if len(m.expectations) > 0 {
		m.mock.t.Fatalf("Some expectations are already set for the Store.ListModuleIDs method")
	}

	m.mock.funcListModuleIDs = f
	return m.mock
}

// ListModuleIDs implements Store
func (m *StoreMock) ListModuleIDs() (ia1 []int64, err error) {
	mm_atomic.AddUint64(&m.beforeListModuleIDsCounter, 1)
	defer mm_atomic.AddUint64(&m.afterListModuleIDsCounter, 1)

	if m.ListModuleIDsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&m.ListModuleIDsMock.defaultExpectation.Counter, 1)

		results := m.ListModuleIDsMock.defaultExpectation.results
		if results == nil {
			m.t.Fatal("No results are set for the StoreMock.ListModuleIDs")
		}
		return (*results).ia1, (*results).err
	}
	if m.funcListModuleIDs != nil {
		return m.funcListModuleIDs()
	}
	m.t.Fatalf("Unexpected call to StoreMock.ListModuleIDs.")
	return
}

// ListModuleIDsAfterCounter returns a count of finished StoreMock.ListModuleIDs invocations
func (m *StoreMock) ListModuleIDsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&m.afterListModuleIDsCounter)
}

// ListModuleIDsBeforeCounter returns a count of StoreMock.ListModuleIDs invocations
func (m *StoreMock) ListModuleIDsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&m.beforeListModuleIDsCounter)
}

// MinimockListModuleIDsDone returns true if the count of the ListModuleIDs invocations corresponds
// the number of defined expectations
func (m *StoreMock) MinimockListModuleIDsDone() bool {
	for _, e := range m.ListModuleIDsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ListModuleIDsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterListModuleIDsCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcListModuleIDs != nil && mm_atomic.LoadUint64(&m.afterListModuleIDsCounter) < 1 {
		return false
	}
	return true
}

// MinimockListModuleIDsInspect logs each unmet expectation
func (m *StoreMock) MinimockListModuleIDsInspect() {
	for _, e := range m.ListModuleIDsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to StoreMock.ListModuleIDs")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ListModuleIDsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterListModuleIDsCounter) < 1 {
		m.t.Error("Expected call to StoreMock.ListModuleIDs")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcListModuleIDs != nil && mm_atomic.LoadUint64(&m.afterListModuleIDsCounter) < 1 {
		m.t.Error("Expected call to StoreMock.ListModuleIDs")
	}
}

type mStoreMockListModules struct {
	mock               *StoreMock
	defaultExpectation *StoreMockListModulesExpectation
	expectations       []*StoreMockListModulesExpectation
}

// StoreMockListModulesExpectation specifies expectation struct of the Store.ListModules
type StoreMockListModulesExpectation struct {
	mock *StoreMock

	results *StoreMockListModulesResults
	Counter uint64
}

// StoreMockListModulesResults contains results of the Store.ListModules
type StoreMockListModulesResults struct {
	sa1 []coordinates.SerialModule
	err error
}

// Expect sets up expected params for Store.ListModules
func (m *mStoreMockListModules) Expect() *mStoreMockListModules {
	if m.mock.funcListModules != nil {
		m.mock.t.Fatalf("StoreMock.ListModules mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &StoreMockListModulesExpectation{}
	}

	return m
}

// Return sets up results that will be returned by Store.ListModules
func (m *mStoreMockListModules) Return(sa1 []coordinates.SerialModule, err error) *StoreMock {
	if m.mock.funcListModules != nil {
		m.mock.t.Fatalf("StoreMock.ListModules mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &StoreMockListModulesExpectation{mock: m.mock}
	}
	m.defaultExpectation.results = &StoreMockListModulesResults{sa1, err}
	return m.mock
}

//Set uses given function f to mock the Store.ListModules method
func (m *mStoreMockListModules) Set(f func() (sa1 []coordinates.SerialModule, err error)) *StoreMock {
	if m.defaultExpectation != nil {
		m.mock.t.Fatalf("Default expectation is already set for the Store.ListModules method")
	}

	if len(m.expectations) > 0 {
		m.mock.t.Fatalf("Some expectations are already set for the Store.ListModules method")
	}

	m.mock.funcListModules = f
	return m.mock
}

// ListModules implements Store
func (m *StoreMock) ListModules() (sa1 []coordinates.SerialModule, err error) {
	mm_atomic.AddUint64(&m.beforeListModulesCounter, 1)
	defer mm_atomic.AddUint64(&m.afterListModulesCounter, 1)

	if m.ListModulesMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&m.ListModulesMock.defaultExpectation.Counter, 1)

		results := m.ListModulesMock.defaultExpectation.results
		if results == nil {
			m.t.Fatal("No results are set for the StoreMock.ListModules")
		}
		return (*results).sa1, (*results).err
	}
	if m.funcListModules != nil {
		return m.funcListModules()
	}
	m.t.Fatalf("Unexpected call to StoreMock.ListModules.")
	return
}

// ListModulesAfterCounter returns a count of finished StoreMock.ListModules invocations
func (m *StoreMock) ListModulesAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&m.afterListModulesCounter)
}

// ListModulesBeforeCounter returns a count of StoreMock.ListModules invocations
func (m *StoreMock) ListModulesBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&m.beforeListModulesCounter)
}

// MinimockListModulesDone returns true if the count of the ListModules invocations corresponds
// the number of defined expectations
func (m *StoreMock) MinimockListModulesDone() bool {
	for _, e := range m.ListModulesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ListModulesMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterListModulesCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcListModules != nil && mm_atomic.LoadUint64(&m.afterListModulesCounter) < 1 {
		return false
	}
	return true
}

// MinimockListModulesInspect logs each unmet expectation
func (m *StoreMock) MinimockListModulesInspect() {
	for _, e := range m.ListModulesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to StoreMock.ListModules")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ListModulesMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterListModulesCounter) < 1 {
		m.t.Error("Expected call to StoreMock.ListModules")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcListModules != nil && mm_atomic.LoadUint64(&m.afterListModulesCounter) < 1 {
		m.t.Error("Expected call to StoreMock.ListModules")
	}
}

type mStoreMockListModulesByIDs struct {
	mock               *StoreMock
	defaultExpectation *StoreMockListModulesByIDsExpectation
	expectations       []*StoreMockListModulesByIDsExpectation
}

// StoreMockListModulesByIDsExpectation specifies expectation struct of the Store.ListModulesByIDs
type StoreMockListModulesByIDsExpectation struct {
	mock    *StoreMock
	params  *StoreMockListModulesByIDsParams
	results *StoreMockListModulesByIDsResults
	Counter uint64
}

// StoreMockListModulesByIDsParams contains parameters of the Store.ListModulesByIDs
type StoreMockListModulesByIDsParams struct {
	ids []int64
}

// StoreMockListModulesByIDsResults contains results of the Store.ListModulesByIDs
type StoreMockListModulesByIDsResults struct {
	sa1 []coordinates.SerialModule
	err error
}

// Expect sets up expected params for Store.ListModulesByIDs
func (m *mStoreMockListModulesByIDs) Expect(ids []int64) *mStoreMockListModulesByIDs {
	if m.mock.funcListModulesByIDs != nil {
		m.mock.t.Fatalf("StoreMock.ListModulesByIDs mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &StoreMockListModulesByIDsExpectation{}
	}

	m.defaultExpectation.params = &StoreMockListModulesByIDsParams{ids}
	for _, e := range m.expectations {
		if minimock.Equal(e.params, m.defaultExpectation.params) {
			m.mock.t.Fatalf("Expectation set by When has same params: %#v", *m.defaultExpectation.params)
		}
	}

	return m
}

// Return sets up results that will be returned by Store.ListModulesByIDs
func (m *mStoreMockListModulesByIDs) Return(sa1 []coordinates.SerialModule, err error) *StoreMock {
	if m.mock.funcListModulesByIDs != nil {
		m.mock.t.Fatalf("StoreMock.ListModulesByIDs mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &StoreMockListModulesByIDsExpectation{mock: m.mock}
	}
	m.defaultExpectation.results = &StoreMockListModulesByIDsResults{sa1, err}
	return m.mock
}

//Set uses given function f to mock the Store.ListModulesByIDs method
func (m *mStoreMockListModulesByIDs) Set(f func(ids []int64) (sa1 []coordinates.SerialModule, err error)) *StoreMock {
	if m.defaultExpectation != nil {
		m.mock.t.Fatalf("Default expectation is already set for the Store.ListModulesByIDs method")
	}

	if len(m.expectations) > 0 {
		m.mock.t.Fatalf("Some expectations are already set for the Store.ListModulesByIDs method")
	}

	m.mock.funcListModulesByIDs = f
	return m.mock
}

// When sets expectation for the Store.ListModulesByIDs which will trigger the result defined by the following
// Then helper
func (m *mStoreMockListModulesByIDs) When(ids []int64) *StoreMockListModulesByIDsExpectation {
	if m.mock.funcListModulesByIDs != nil {
		m.mock.t.Fatalf("StoreMock.ListModulesByIDs mock is already set by Set")
	}

	expectation := &StoreMockListModulesByIDsExpectation{
		mock:   m.mock,
		params: &StoreMockListModulesByIDsParams{ids},
	}
	m.expectations = append(m.expectations, expectation)
	return expectation
}

// Then sets up Store.ListModulesByIDs return parameters for the expectation previously defined by the When method
func (e *StoreMockListModulesByIDsExpectation) Then(sa1 []coordinates.SerialModule, err error) *StoreMock {
	e.results = &StoreMockListModulesByIDsResults{sa1, err}
	return e.mock
}

// ListModulesByIDs implements Store
func (m *StoreMock) ListModulesByIDs(ids []int64) (sa1 []coordinates.SerialModule, err error) {
	mm_atomic.AddUint64(&m.beforeListModulesByIDsCounter, 1)
	defer mm_atomic.AddUint64(&m.afterListModulesByIDsCounter, 1)

	for _, e := range m.ListModulesByIDsMock.expectations {
		if minimock.Equal(*e.params, StoreMockListModulesByIDsParams{ids}) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.sa1, e.results.err
		}
	}

	if m.ListModulesByIDsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&m.ListModulesByIDsMock.defaultExpectation.Counter, 1)
		want := m.ListModulesByIDsMock.defaultExpectation.params
		got := StoreMockListModulesByIDsParams{ids}
		if want != nil && !minimock.Equal(*want, got) {
			m.t.Errorf("StoreMock.ListModulesByIDs got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := m.ListModulesByIDsMock.defaultExpectation.results
		if results == nil {
			m.t.Fatal("No results are set for the StoreMock.ListModulesByIDs")
		}
		return (*results).sa1, (*results).err
	}
	if m.funcListModulesByIDs != nil {
		return m.funcListModulesByIDs(ids)
	}
	m.t.Fatalf("Unexpected call to StoreMock.ListModulesByIDs. %v", ids)
	return
}

// ListModulesByIDsAfterCounter returns a count of finished StoreMock.ListModulesByIDs invocations
func (m *StoreMock) ListModulesByIDsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&m.afterListModulesByIDsCounter)
}

// ListModulesByIDsBeforeCounter returns a count of StoreMock.ListModulesByIDs invocations
func (m *StoreMock) ListModulesByIDsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&m.beforeListModulesByIDsCounter)
}

// MinimockListModulesByIDsDone returns true if the count of the ListModulesByIDs invocations corresponds
// the number of defined expectations
func (m *StoreMock) MinimockListModulesByIDsDone() bool {
	for _, e := range m.ListModulesByIDsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ListModulesByIDsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterListModulesByIDsCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcListModulesByIDs != nil && mm_atomic.LoadUint64(&m.afterListModulesByIDsCounter) < 1 {
		return false
	}
	return true
}

// MinimockListModulesByIDsInspect logs each unmet expectation
func (m *StoreMock) MinimockListModulesByIDsInspect() {
	for _, e := range m.ListModulesByIDsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to StoreMock.ListModulesByIDs with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ListModulesByIDsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterListModulesByIDsCounter) < 1 {
		if m.ListModulesByIDsMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to StoreMock.ListModulesByIDs")
		} else {
			m.t.Errorf("Expected call to StoreMock.ListModulesByIDs with params: %#v", *m.ListModulesByIDsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcListModulesByIDs != nil && mm_atomic.LoadUint64(&m.afterListModulesByIDsCounter) < 1 {
		m.t.Error("Expected call to StoreMock.ListModulesByIDs")
	}
}

type mStoreMockListModulesBySource struct {
	mock               *StoreMock
	defaultExpectation *StoreMockListModulesBySourceExpectation
	expectations       []*StoreMockListModulesBySourceExpectation
}

// StoreMockListModulesBySourceExpectation specifies expectation struct of the Store.ListModulesBySource
type StoreMockListModulesBySourceExpectation struct {
	mock    *StoreMock
	params  *StoreMockListModulesBySourceParams
	results *StoreMockListModulesBySourceResults
	Counter uint64
}

// StoreMockListModulesBySourceParams contains parameters of the Store.ListModulesBySource
type StoreMockListModulesBySourceParams struct {
	source string
}

// StoreMockListModulesBySourceResults contains results of the Store.ListModulesBySource
type StoreMockListModulesBySourceResults struct {
	sa1 []coordinates.SerialModule
	err error
}

// Expect sets up expected params for Store.ListModulesBySource
func (m *mStoreMockListModulesBySource) Expect(source string) *mStoreMockListModulesBySource {
	if m.mock.funcListModulesBySource != nil {
		m.mock.t.Fatalf("StoreMock.ListModulesBySource mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &StoreMockListModulesBySourceExpectation{}
	}

	m.defaultExpectation.params = &StoreMockListModulesBySourceParams{source}
	for _, e := range m.expectations {
		if minimock.Equal(e.params, m.defaultExpectation.params) {
			m.mock.t.Fatalf("Expectation set by When has same params: %#v", *m.defaultExpectation.params)
		}
	}

	return m
}

// Return sets up results that will be returned by Store.ListModulesBySource
func (m *mStoreMockListModulesBySource) Return(sa1 []coordinates.SerialModule, err error) *StoreMock {
	if m.mock.funcListModulesBySource != nil {
		m.mock.t.Fatalf("StoreMock.ListModulesBySource mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &StoreMockListModulesBySourceExpectation{mock: m.mock}
	}
	m.defaultExpectation.results = &StoreMockListModulesBySourceResults{sa1, err}
	return m.mock
}

//Set uses given function f to mock the Store.ListModulesBySource method
func (m *mStoreMockListModulesBySource) Set(f func(source string) (sa1 []coordinates.SerialModule, err error)) *StoreMock {
	if m.defaultExpectation != nil {
		m.mock.t.Fatalf("Default expectation is already set for the Store.ListModulesBySource method")
	}

	if len(m.expectations) > 0 {
		m.mock.t.Fatalf("Some expectations are already set for the Store.ListModulesBySource method")
	}

	m.mock.funcListModulesBySource = f
	return m.mock
}

// When sets expectation for the Store.ListModulesBySource which will trigger the result defined by the following
// Then helper
func (m *mStoreMockListModulesBySource) When(source string) *StoreMockListModulesBySourceExpectation {
	if m.mock.funcListModulesBySource != nil {
		m.mock.t.Fatalf("StoreMock.ListModulesBySource mock is already set by Set")
	}

	expectation := &StoreMockListModulesBySourceExpectation{
		mock:   m.mock,
		params: &StoreMockListModulesBySourceParams{source},
	}
	m.expectations = append(m.expectations, expectation)
	return expectation
}

// Then sets up Store.ListModulesBySource return parameters for the expectation previously defined by the When method
func (e *StoreMockListModulesBySourceExpectation) Then(sa1 []coordinates.SerialModule, err error) *StoreMock {
	e.results = &StoreMockListModulesBySourceResults{sa1, err}
	return e.mock
}

// ListModulesBySource implements Store
func (m *StoreMock) ListModulesBySource(source string) (sa1 []coordinates.SerialModule, err error) {
	mm_atomic.AddUint64(&m.beforeListModulesBySourceCounter, 1)
	defer mm_atomic.AddUint64(&m.afterListModulesBySourceCounter, 1)

	for _, e := range m.ListModulesBySourceMock.expectations {
		if minimock.Equal(*e.params, StoreMockListModulesBySourceParams{source}) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.sa1, e.results.err
		}
	}

	if m.ListModulesBySourceMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&m.ListModulesBySourceMock.defaultExpectation.Counter, 1)
		want := m.ListModulesBySourceMock.defaultExpectation.params
		got := StoreMockListModulesBySourceParams{source}
		if want != nil && !minimock.Equal(*want, got) {
			m.t.Errorf("StoreMock.ListModulesBySource got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := m.ListModulesBySourceMock.defaultExpectation.results
		if results == nil {
			m.t.Fatal("No results are set for the StoreMock.ListModulesBySource")
		}
		return (*results).sa1, (*results).err
	}
	if m.funcListModulesBySource != nil {
		return m.funcListModulesBySource(source)
	}
	m.t.Fatalf("Unexpected call to StoreMock.ListModulesBySource. %v", source)
	return
}

// ListModulesBySourceAfterCounter returns a count of finished StoreMock.ListModulesBySource invocations
func (m *StoreMock) ListModulesBySourceAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&m.afterListModulesBySourceCounter)
}

// ListModulesBySourceBeforeCounter returns a count of StoreMock.ListModulesBySource invocations
func (m *StoreMock) ListModulesBySourceBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&m.beforeListModulesBySourceCounter)
}

// MinimockListModulesBySourceDone returns true if the count of the ListModulesBySource invocations corresponds
// the number of defined expectations
func (m *StoreMock) MinimockListModulesBySourceDone() bool {
	for _, e := range m.ListModulesBySourceMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ListModulesBySourceMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterListModulesBySourceCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcListModulesBySource != nil && mm_atomic.LoadUint64(&m.afterListModulesBySourceCounter) < 1 {
		return false
	}
	return true
}

// MinimockListModulesBySourceInspect logs each unmet expectation
func (m *StoreMock) MinimockListModulesBySourceInspect() {
	for _, e := range m.ListModulesBySourceMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to StoreMock.ListModulesBySource with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ListModulesBySourceMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterListModulesBySourceCounter) < 1 {
		if m.ListModulesBySourceMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to StoreMock.ListModulesBySource")
		} else {
			m.t.Errorf("Expected call to StoreMock.ListModulesBySource with params: %#v", *m.ListModulesBySourceMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcListModulesBySource != nil && mm_atomic.LoadUint64(&m.afterListModulesBySourceCounter) < 1 {
		m.t.Error("Expected call to StoreMock.ListModulesBySource")
	}
}

type mStoreMockListStartConfigs struct {
	mock               *StoreMock
	defaultExpectation *StoreMockListStartConfigsExpectation
	expectations       []*StoreMockListStartConfigsExpectation
}

// StoreMockListStartConfigsExpectation specifies expectation struct of the Store.ListStartConfigs
type StoreMockListStartConfigsExpectation struct {
	mock *StoreMock

	results *StoreMockListStartConfigsResults
	Counter uint64
}

// StoreMockListStartConfigsResults contains results of the Store.ListStartConfigs
type StoreMockListStartConfigsResults struct {
	ca1 []payloads.Configuration
	err error
}

// Expect sets up expected params for Store.ListStartConfigs
func (m *mStoreMockListStartConfigs) Expect() *mStoreMockListStartConfigs {
	if m.mock.funcListStartConfigs != nil {
		m.mock.t.Fatalf("StoreMock.ListStartConfigs mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &StoreMockListStartConfigsExpectation{}
	}

	return m
}

// Return sets up results that will be returned by Store.ListStartConfigs
func (m *mStoreMockListStartConfigs) Return(ca1 []payloads.Configuration, err error) *StoreMock {
	if m.mock.funcListStartConfigs != nil {
		m.mock.t.Fatalf("StoreMock.ListStartConfigs mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &StoreMockListStartConfigsExpectation{mock: m.mock}
	}
	m.defaultExpectation.results = &StoreMockListStartConfigsResults{ca1, err}
	return m.mock
}

//Set uses given function f to mock the Store.ListStartConfigs method
func (m *mStoreMockListStartConfigs) Set(f func() (ca1 []payloads.Configuration, err error)) *StoreMock {
	if m.defaultExpectation != nil {
		m.mock.t.Fatalf("Default expectation is already set for the Store.ListStartConfigs method")
	}

	if len(m.expectations) > 0 {
		m.mock.t.Fatalf("Some expectations are already set for the Store.ListStartConfigs method")
	}

	m.mock.funcListStartConfigs = f
	return m.mock
}

// ListStartConfigs implements Store
func (m *StoreMock) ListStartConfigs() (ca1 []payloads.Configuration, err error) {
	mm_atomic.AddUint64(&m.beforeListStartConfigsCounter, 1)
	defer mm_atomic.AddUint64(&m.afterListStartConfigsCounter, 1)

	if m.ListStartConfigsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&m.ListStartConfigsMock.defaultExpectation.Counter, 1)

		results := m.ListStartConfigsMock.defaultExpectation.results
		if results == nil {
			m.t.Fatal("No results are set for the StoreMock.ListStartConfigs")
		}
		return (*results).ca1, (*results).err
	}
	if m.funcListStartConfigs != nil {
		return m.funcListStartConfigs()
	}
	m.t.Fatalf("Unexpected call to StoreMock.ListStartConfigs.")
	return
}

// ListStartConfigsAfterCounter returns a count of finished StoreMock.ListStartConfigs invocations
func (m *StoreMock) ListStartConfigsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&m.afterListStartConfigsCounter)
}

// ListStartConfigsBeforeCounter returns a count of StoreMock.ListStartConfigs invocations
func (m *StoreMock) ListStartConfigsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&m.beforeListStartConfigsCounter)
}

// MinimockListStartConfigsDone returns true if the count of the ListStartConfigs invocations corresponds
// the number of defined expectations
func (m *StoreMock) MinimockListStartConfigsDone() bool {
	for _, e := range m.ListStartConfigsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ListStartConfigsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterListStartConfigsCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcListStartConfigs != nil && mm_atomic.LoadUint64(&m.afterListStartConfigsCounter) < 1 {
		return false
	}
	return true
}

// MinimockListStartConfigsInspect logs each unmet expectation
func (m *StoreMock) MinimockListStartConfigsInspect() {
	for _, e := range m.ListStartConfigsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to StoreMock.ListStartConfigs")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ListStartConfigsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterListStartConfigsCounter) < 1 {
		m.t.Error("Expected call to StoreMock.ListStartConfigs")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcListStartConfigs != nil && mm_atomic.LoadUint64(&m.afterListStartConfigsCounter) < 1 {
		m.t.Error("Expected call to StoreMock.ListStartConfigs")
	}
}

type mStoreMockPurgeProxy struct {
	mock               *StoreMock
	defaultExpectation *StoreMockPurgeProxyExpectation
	expectations       []*StoreMockPurgeProxyExpectation
}

// StoreMockPurgeProxyExpectation specifies expectation struct of the Store.PurgeProxy
type StoreMockPurgeProxyExpectation struct {
	mock    *StoreMock
	params  *StoreMockPurgeProxyParams
	results *StoreMockPurgeProxyResults
	Counter uint64
}

// StoreMockPurgeProxyParams contains parameters of the Store.PurgeProxy
type StoreMockPurgeProxyParams struct {
	instance netservice.Instance
}

// StoreMockPurgeProxyResults contains results of the Store.PurgeProxy
type StoreMockPurgeProxyResults struct {
	err error
}

// Expect sets up expected params for Store.PurgeProxy
func (m *mStoreMockPurgeProxy) Expect(instance netservice.Instance) *mStoreMockPurgeProxy {
	if m.mock.funcPurgeProxy != nil {
		m.mock.t.Fatalf("StoreMock.PurgeProxy mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &StoreMockPurgeProxyExpectation{}
	}

	m.defaultExpectation.params = &StoreMockPurgeProxyParams{instance}
	for _, e := range m.expectations {
		if minimock.Equal(e.params, m.defaultExpectation.params) {
			m.mock.t.Fatalf("Expectation set by When has same params: %#v", *m.defaultExpectation.params)
		}
	}

	return m
}

// Return sets up results that will be returned by Store.PurgeProxy
func (m *mStoreMockPurgeProxy) Return(err error) *StoreMock {
	if m.mock.funcPurgeProxy != nil {
		m.mock.t.Fatalf("StoreMock.PurgeProxy mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &StoreMockPurgeProxyExpectation{mock: m.mock}
	}
	m.defaultExpectation.results = &StoreMockPurgeProxyResults{err}
	return m.mock
}

//Set uses given function f to mock the Store.PurgeProxy method
func (m *mStoreMockPurgeProxy) Set(f func(instance netservice.Instance) (err error)) *StoreMock {
	if m.defaultExpectation != nil {
		m.mock.t.Fatalf("Default expectation is already set for the Store.PurgeProxy method")
	}

	if len(m.expectations) > 0 {
		m.mock.t.Fatalf("Some expectations are already set for the Store.PurgeProxy method")
	}

	m.mock.funcPurgeProxy = f
	return m.mock
}

// When sets expectation for the Store.PurgeProxy which will trigger the result defined by the following
// Then helper
func (m *mStoreMockPurgeProxy) When(instance netservice.Instance) *StoreMockPurgeProxyExpectation {
	if m.mock.funcPurgeProxy != nil {
		m.mock.t.Fatalf("StoreMock.PurgeProxy mock is already set by Set")
	}

	expectation := &StoreMockPurgeProxyExpectation{
		mock:   m.mock,
		params: &StoreMockPurgeProxyParams{instance},
	}
	m.expectations = append(m.expectations, expectation)
	return expectation
}

// Then sets up Store.PurgeProxy return parameters for the expectation previously defined by the When method
func (e *StoreMockPurgeProxyExpectation) Then(err error) *StoreMock {
	e.results = &StoreMockPurgeProxyResults{err}
	return e.mock
}

// PurgeProxy implements Store
func (m *StoreMock) PurgeProxy(instance netservice.Instance) (err error) {
	mm_atomic.AddUint64(&m.beforePurgeProxyCounter, 1)
	defer mm_atomic.AddUint64(&m.afterPurgeProxyCounter, 1)

	for _, e := range m.PurgeProxyMock.expectations {
		if minimock.Equal(*e.params, StoreMockPurgeProxyParams{instance}) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if m.PurgeProxyMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&m.PurgeProxyMock.defaultExpectation.Counter, 1)
		want := m.PurgeProxyMock.defaultExpectation.params
		got := StoreMockPurgeProxyParams{instance}
		if want != nil && !minimock.Equal(*want, got) {
			m.t.Errorf("StoreMock.PurgeProxy got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := m.PurgeProxyMock.defaultExpectation.results
		if results == nil {
			m.t.Fatal("No results are set for the StoreMock.PurgeProxy")
		}
		return (*results).err
	}
	if m.funcPurgeProxy != nil {
		return m.funcPurgeProxy(instance)
	}
	m.t.Fatalf("Unexpected call to StoreMock.PurgeProxy. %v", instance)
	return
}

// PurgeProxyAfterCounter returns a count of finished StoreMock.PurgeProxy invocations
func (m *StoreMock) PurgeProxyAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&m.afterPurgeProxyCounter)
}

// PurgeProxyBeforeCounter returns a count of StoreMock.PurgeProxy invocations
func (m *StoreMock) PurgeProxyBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&m.beforePurgeProxyCounter)
}

// MinimockPurgeProxyDone returns true if the count of the PurgeProxy invocations corresponds
// the number of defined expectations
func (m *StoreMock) MinimockPurgeProxyDone() bool {
	for _, e := range m.PurgeProxyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.PurgeProxyMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterPurgeProxyCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcPurgeProxy != nil && mm_atomic.LoadUint64(&m.afterPurgeProxyCounter) < 1 {
		return false
	}
	return true
}

// MinimockPurgeProxyInspect logs each unmet expectation
func (m *StoreMock) MinimockPurgeProxyInspect() {
	for _, e := range m.PurgeProxyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to StoreMock.PurgeProxy with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.PurgeProxyMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterPurgeProxyCounter) < 1 {
		if m.PurgeProxyMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to StoreMock.PurgeProxy")
		} else {
			m.t.Errorf("Expected call to StoreMock.PurgeProxy with params: %#v", *m.PurgeProxyMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcPurgeProxy != nil && mm_atomic.LoadUint64(&m.afterPurgeProxyCounter) < 1 {
		m.t.Error("Expected call to StoreMock.PurgeProxy")
	}
}

type mStoreMockSetHeartbeat struct {
	mock               *StoreMock
	defaultExpectation *StoreMockSetHeartbeatExpectation
	expectations       []*StoreMockSetHeartbeatExpectation
}

// StoreMockSetHeartbeatExpectation specifies expectation struct of the Store.SetHeartbeat
type StoreMockSetHeartbeatExpectation struct {
	mock    *StoreMock
	params  *StoreMockSetHeartbeatParams
	results *StoreMockSetHeartbeatResults
	Counter uint64
}

// StoreMockSetHeartbeatParams contains parameters of the Store.SetHeartbeat
type StoreMockSetHeartbeatParams struct {
	h1 payloads.Heartbeat
}

// StoreMockSetHeartbeatResults contains results of the Store.SetHeartbeat
type StoreMockSetHeartbeatResults struct {
	err error
}

// Expect sets up expected params for Store.SetHeartbeat
func (m *mStoreMockSetHeartbeat) Expect(h1 payloads.Heartbeat) *mStoreMockSetHeartbeat {
	if m.mock.funcSetHeartbeat != nil {
		m.mock.t.Fatalf("StoreMock.SetHeartbeat mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &StoreMockSetHeartbeatExpectation{}
	}

	m.defaultExpectation.params = &StoreMockSetHeartbeatParams{h1}
	for _, e := range m.expectations {
		if minimock.Equal(e.params, m.defaultExpectation.params) {
			m.mock.t.Fatalf("Expectation set by When has same params: %#v", *m.defaultExpectation.params)
		}
	}

	return m
}

// Return sets up results that will be returned by Store.SetHeartbeat
func (m *mStoreMockSetHeartbeat) Return(err error) *StoreMock {
	if m.mock.funcSetHeartbeat != nil {
		m.mock.t.Fatalf("StoreMock.SetHeartbeat mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &StoreMockSetHeartbeatExpectation{mock: m.mock}
	}
	m.defaultExpectation.results = &StoreMockSetHeartbeatResults{err}
	return m.mock
}

//Set uses given function f to mock the Store.SetHeartbeat method
func (m *mStoreMockSetHeartbeat) Set(f func(h1 payloads.Heartbeat) (err error)) *StoreMock {
	if m.defaultExpectation != nil {
		m.mock.t.Fatalf("Default expectation is already set for the Store.SetHeartbeat method")
	}

	if len(m.expectations) > 0 {
		m.mock.t.Fatalf("Some expectations are already set for the Store.SetHeartbeat method")
	}

	m.mock.funcSetHeartbeat = f
	return m.mock
}

// When sets expectation for the Store.SetHeartbeat which will trigger the result defined by the following
// Then helper
func (m *mStoreMockSetHeartbeat) When(h1 payloads.Heartbeat) *StoreMockSetHeartbeatExpectation {
	if m.mock.funcSetHeartbeat != nil {
		m.mock.t.Fatalf("StoreMock.SetHeartbeat mock is already set by Set")
	}

	expectation := &StoreMockSetHeartbeatExpectation{
		mock:   m.mock,
		params: &StoreMockSetHeartbeatParams{h1},
	}
	m.expectations = append(m.expectations, expectation)
	return expectation
}

// Then sets up Store.SetHeartbeat return parameters for the expectation previously defined by the When method
func (e *StoreMockSetHeartbeatExpectation) Then(err error) *StoreMock {
	e.results = &StoreMockSetHeartbeatResults{err}
	return e.mock
}

// SetHeartbeat implements Store
func (m *StoreMock) SetHeartbeat(h1 payloads.Heartbeat) (err error) {
	mm_atomic.AddUint64(&m.beforeSetHeartbeatCounter, 1)
	defer mm_atomic.AddUint64(&m.afterSetHeartbeatCounter, 1)

	for _, e := range m.SetHeartbeatMock.expectations {
		if minimock.Equal(*e.params, StoreMockSetHeartbeatParams{h1}) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if m.SetHeartbeatMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&m.SetHeartbeatMock.defaultExpectation.Counter, 1)
		want := m.SetHeartbeatMock.defaultExpectation.params
		got := StoreMockSetHeartbeatParams{h1}
		if want != nil && !minimock.Equal(*want, got) {
			m.t.Errorf("StoreMock.SetHeartbeat got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := m.SetHeartbeatMock.defaultExpectation.results
		if results == nil {
			m.t.Fatal("No results are set for the StoreMock.SetHeartbeat")
		}
		return (*results).err
	}
	if m.funcSetHeartbeat != nil {
		return m.funcSetHeartbeat(h1)
	}
	m.t.Fatalf("Unexpected call to StoreMock.SetHeartbeat. %v", h1)
	return
}

// SetHeartbeatAfterCounter returns a count of finished StoreMock.SetHeartbeat invocations
func (m *StoreMock) SetHeartbeatAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&m.afterSetHeartbeatCounter)
}

// SetHeartbeatBeforeCounter returns a count of StoreMock.SetHeartbeat invocations
func (m *StoreMock) SetHeartbeatBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&m.beforeSetHeartbeatCounter)
}

// MinimockSetHeartbeatDone returns true if the count of the SetHeartbeat invocations corresponds
// the number of defined expectations
func (m *StoreMock) MinimockSetHeartbeatDone() bool {
	for _, e := range m.SetHeartbeatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SetHeartbeatMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSetHeartbeatCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSetHeartbeat != nil && mm_atomic.LoadUint64(&m.afterSetHeartbeatCounter) < 1 {
		return false
	}
	return true
}

// MinimockSetHeartbeatInspect logs each unmet expectation
func (m *StoreMock) MinimockSetHeartbeatInspect() {
	for _, e := range m.SetHeartbeatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to StoreMock.SetHeartbeat with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SetHeartbeatMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSetHeartbeatCounter) < 1 {
		if m.SetHeartbeatMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to StoreMock.SetHeartbeat")
		} else {
			m.t.Errorf("Expected call to StoreMock.SetHeartbeat with params: %#v", *m.SetHeartbeatMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSetHeartbeat != nil && mm_atomic.LoadUint64(&m.afterSetHeartbeatCounter) < 1 {
		m.t.Error("Expected call to StoreMock.SetHeartbeat")
	}
}

type mStoreMockSetStartConfig struct {
	mock               *StoreMock
	defaultExpectation *StoreMockSetStartConfigExpectation
	expectations       []*StoreMockSetStartConfigExpectation
}

// StoreMockSetStartConfigExpectation specifies expectation struct of the Store.SetStartConfig
type StoreMockSetStartConfigExpectation struct {
	mock    *StoreMock
	params  *StoreMockSetStartConfigParams
	results *StoreMockSetStartConfigResults
	Counter uint64
}

// StoreMockSetStartConfigParams contains parameters of the Store.SetStartConfig
type StoreMockSetStartConfigParams struct {
	c1 payloads.Configuration
}

// StoreMockSetStartConfigResults contains results of the Store.SetStartConfig
type StoreMockSetStartConfigResults struct {
	err error
}

// Expect sets up expected params for Store.SetStartConfig
func (m *mStoreMockSetStartConfig) Expect(c1 payloads.Configuration) *mStoreMockSetStartConfig {
	if m.mock.funcSetStartConfig != nil {
		m.mock.t.Fatalf("StoreMock.SetStartConfig mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &StoreMockSetStartConfigExpectation{}
	}

	m.defaultExpectation.params = &StoreMockSetStartConfigParams{c1}
	for _, e := range m.expectations {
		if minimock.Equal(e.params, m.defaultExpectation.params) {
			m.mock.t.Fatalf("Expectation set by When has same params: %#v", *m.defaultExpectation.params)
		}
	}

	return m
}

// Return sets up results that will be returned by Store.SetStartConfig
func (m *mStoreMockSetStartConfig) Return(err error) *StoreMock {
	if m.mock.funcSetStartConfig != nil {
		m.mock.t.Fatalf("StoreMock.SetStartConfig mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &StoreMockSetStartConfigExpectation{mock: m.mock}
	}
	m.defaultExpectation.results = &StoreMockSetStartConfigResults{err}
	return m.mock
}

//Set uses given function f to mock the Store.SetStartConfig method
func (m *mStoreMockSetStartConfig) Set(f func(c1 payloads.Configuration) (err error)) *StoreMock {
	if m.defaultExpectation != nil {
		m.mock.t.Fatalf("Default expectation is already set for the Store.SetStartConfig method")
	}

	if len(m.expectations) > 0 {
		m.mock.t.Fatalf("Some expectations are already set for the Store.SetStartConfig method")
	}

	m.mock.funcSetStartConfig = f
	return m.mock
}

// When sets expectation for the Store.SetStartConfig which will trigger the result defined by the following
// Then helper
func (m *mStoreMockSetStartConfig) When(c1 payloads.Configuration) *StoreMockSetStartConfigExpectation {
	if m.mock.funcSetStartConfig != nil {
		m.mock.t.Fatalf("StoreMock.SetStartConfig mock is already set by Set")
	}

	expectation := &StoreMockSetStartConfigExpectation{
		mock:   m.mock,
		params: &StoreMockSetStartConfigParams{c1},
	}
	m.expectations = append(m.expectations, expectation)
	return expectation
}

// Then sets up Store.SetStartConfig return parameters for the expectation previously defined by the When method
func (e *StoreMockSetStartConfigExpectation) Then(err error) *StoreMock {
	e.results = &StoreMockSetStartConfigResults{err}
	return e.mock
}

// SetStartConfig implements Store
func (m *StoreMock) SetStartConfig(c1 payloads.Configuration) (err error) {
	mm_atomic.AddUint64(&m.beforeSetStartConfigCounter, 1)
	defer mm_atomic.AddUint64(&m.afterSetStartConfigCounter, 1)

	for _, e := range m.SetStartConfigMock.expectations {
		if minimock.Equal(*e.params, StoreMockSetStartConfigParams{c1}) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if m.SetStartConfigMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&m.SetStartConfigMock.defaultExpectation.Counter, 1)
		want := m.SetStartConfigMock.defaultExpectation.params
		got := StoreMockSetStartConfigParams{c1}
		if want != nil && !minimock.Equal(*want, got) {
			m.t.Errorf("StoreMock.SetStartConfig got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := m.SetStartConfigMock.defaultExpectation.results
		if results == nil {
			m.t.Fatal("No results are set for the StoreMock.SetStartConfig")
		}
		return (*results).err
	}
	if m.funcSetStartConfig != nil {
		return m.funcSetStartConfig(c1)
	}
	m.t.Fatalf("Unexpected call to StoreMock.SetStartConfig. %v", c1)
	return
}

// SetStartConfigAfterCounter returns a count of finished StoreMock.SetStartConfig invocations
func (m *StoreMock) SetStartConfigAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&m.afterSetStartConfigCounter)
}

// SetStartConfigBeforeCounter returns a count of StoreMock.SetStartConfig invocations
func (m *StoreMock) SetStartConfigBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&m.beforeSetStartConfigCounter)
}

// MinimockSetStartConfigDone returns true if the count of the SetStartConfig invocations corresponds
// the number of defined expectations
func (m *StoreMock) MinimockSetStartConfigDone() bool {
	for _, e := range m.SetStartConfigMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SetStartConfigMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSetStartConfigCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSetStartConfig != nil && mm_atomic.LoadUint64(&m.afterSetStartConfigCounter) < 1 {
		return false
	}
	return true
}

// MinimockSetStartConfigInspect logs each unmet expectation
func (m *StoreMock) MinimockSetStartConfigInspect() {
	for _, e := range m.SetStartConfigMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to StoreMock.SetStartConfig with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SetStartConfigMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSetStartConfigCounter) < 1 {
		if m.SetStartConfigMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to StoreMock.SetStartConfig")
		} else {
			m.t.Errorf("Expected call to StoreMock.SetStartConfig with params: %#v", *m.SetStartConfigMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSetStartConfig != nil && mm_atomic.LoadUint64(&m.afterSetStartConfigCounter) < 1 {
		m.t.Error("Expected call to StoreMock.SetStartConfig")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *StoreMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockDeleteModuleByIDInspect()

		m.MinimockInsertModulesInspect()

		m.MinimockListHeartbeatsInspect()

		m.MinimockListModuleIDsInspect()

		m.MinimockListModulesInspect()

		m.MinimockListModulesByIDsInspect()

		m.MinimockListModulesBySourceInspect()

		m.MinimockListStartConfigsInspect()

		m.MinimockPurgeProxyInspect()

		m.MinimockSetHeartbeatInspect()

		m.MinimockSetStartConfigInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *StoreMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *StoreMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockDeleteModuleByIDDone() &&
		m.MinimockInsertModulesDone() &&
		m.MinimockListHeartbeatsDone() &&
		m.MinimockListModuleIDsDone() &&
		m.MinimockListModulesDone() &&
		m.MinimockListModulesByIDsDone() &&
		m.MinimockListModulesBySourceDone() &&
		m.MinimockListStartConfigsDone() &&
		m.MinimockPurgeProxyDone() &&
		m.MinimockSetHeartbeatDone() &&
		m.MinimockSetStartConfigDone()
}
