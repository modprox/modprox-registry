// Code autogenerated by mockery v3
//
// Do not manually edit the content of this file.

// Package storetest contains autogenerated mocks.
package storetest

import "github.com/modprox/mp/pkg/coordinates"
import "github.com/stretchr/testify/mock"
import "github.com/modprox/mp/pkg/repository"

// ZipStore is an autogenerated mock type for the ZipStore type
type ZipStore struct {
	mock.Mock
}

// DelZip provides a mock function with given fields: mockeryArg0
func (mockerySelf *ZipStore) DelZip(mockeryArg0 coordinates.Module) error {
	ret := mockerySelf.Called(mockeryArg0)

	var r0 error
	if rf, ok := ret.Get(0).(func(coordinates.Module) error); ok {
		r0 = rf(mockeryArg0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetZip provides a mock function with given fields: mockeryArg0
func (mockerySelf *ZipStore) GetZip(mockeryArg0 coordinates.Module) (repository.Blob, error) {
	ret := mockerySelf.Called(mockeryArg0)

	var r0 repository.Blob
	if rf, ok := ret.Get(0).(func(coordinates.Module) repository.Blob); ok {
		r0 = rf(mockeryArg0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repository.Blob)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(coordinates.Module) error); ok {
		r1 = rf(mockeryArg0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutZip provides a mock function with given fields: mockeryArg0, mockeryArg1
func (mockerySelf *ZipStore) PutZip(mockeryArg0 coordinates.Module, mockeryArg1 repository.Blob) error {
	ret := mockerySelf.Called(mockeryArg0, mockeryArg1)

	var r0 error
	if rf, ok := ret.Get(0).(func(coordinates.Module, repository.Blob) error); ok {
		r0 = rf(mockeryArg0, mockeryArg1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
