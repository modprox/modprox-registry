package store

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock"
	"oss.indeed.com/go/modprox/pkg/coordinates"
	"oss.indeed.com/go/modprox/pkg/repository"
)

// IndexMock implements Index
type IndexMock struct {
	t minimock.Tester

	funcContains          func(m1 coordinates.Module) (b1 bool, i1 int64, err error)
	afterContainsCounter  uint64
	beforeContainsCounter uint64
	ContainsMock          mIndexMockContains

	funcIDs          func() (r1 Ranges, err error)
	afterIDsCounter  uint64
	beforeIDsCounter uint64
	IDsMock          mIndexMockIDs

	funcInfo          func(m1 coordinates.Module) (r1 repository.RevInfo, err error)
	afterInfoCounter  uint64
	beforeInfoCounter uint64
	InfoMock          mIndexMockInfo

	funcMod          func(m1 coordinates.Module) (s1 string, err error)
	afterModCounter  uint64
	beforeModCounter uint64
	ModMock          mIndexMockMod

	funcPut          func(m1 ModuleAddition) (err error)
	afterPutCounter  uint64
	beforePutCounter uint64
	PutMock          mIndexMockPut

	funcRemove          func(m1 coordinates.Module) (err error)
	afterRemoveCounter  uint64
	beforeRemoveCounter uint64
	RemoveMock          mIndexMockRemove

	funcSummary          func() (i1 int, i2 int, err error)
	afterSummaryCounter  uint64
	beforeSummaryCounter uint64
	SummaryMock          mIndexMockSummary

	funcUpdateID          func(s1 coordinates.SerialModule) (err error)
	afterUpdateIDCounter  uint64
	beforeUpdateIDCounter uint64
	UpdateIDMock          mIndexMockUpdateID

	funcVersions          func(module string) (sa1 []string, err error)
	afterVersionsCounter  uint64
	beforeVersionsCounter uint64
	VersionsMock          mIndexMockVersions
}

// NewIndexMock returns a mock for Index
func NewIndexMock(t minimock.Tester) *IndexMock {
	m := &IndexMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.ContainsMock = mIndexMockContains{mock: m}
	m.ContainsMock.callArgs = []*IndexMockContainsParams{}

	m.IDsMock = mIndexMockIDs{mock: m}

	m.InfoMock = mIndexMockInfo{mock: m}
	m.InfoMock.callArgs = []*IndexMockInfoParams{}

	m.ModMock = mIndexMockMod{mock: m}
	m.ModMock.callArgs = []*IndexMockModParams{}

	m.PutMock = mIndexMockPut{mock: m}
	m.PutMock.callArgs = []*IndexMockPutParams{}

	m.RemoveMock = mIndexMockRemove{mock: m}
	m.RemoveMock.callArgs = []*IndexMockRemoveParams{}

	m.SummaryMock = mIndexMockSummary{mock: m}

	m.UpdateIDMock = mIndexMockUpdateID{mock: m}
	m.UpdateIDMock.callArgs = []*IndexMockUpdateIDParams{}

	m.VersionsMock = mIndexMockVersions{mock: m}
	m.VersionsMock.callArgs = []*IndexMockVersionsParams{}

	return m
}

type mIndexMockContains struct {
	mock               *IndexMock
	defaultExpectation *IndexMockContainsExpectation
	expectations       []*IndexMockContainsExpectation

	callArgs []*IndexMockContainsParams
	mutex    sync.RWMutex
}

// IndexMockContainsExpectation specifies expectation struct of the Index.Contains
type IndexMockContainsExpectation struct {
	mock    *IndexMock
	params  *IndexMockContainsParams
	results *IndexMockContainsResults
	Counter uint64
}

// IndexMockContainsParams contains parameters of the Index.Contains
type IndexMockContainsParams struct {
	m1 coordinates.Module
}

// IndexMockContainsResults contains results of the Index.Contains
type IndexMockContainsResults struct {
	b1  bool
	i1  int64
	err error
}

// Expect sets up expected params for Index.Contains
func (mmContains *mIndexMockContains) Expect(m1 coordinates.Module) *mIndexMockContains {
	if mmContains.mock.funcContains != nil {
		mmContains.mock.t.Fatalf("IndexMock.Contains mock is already set by Set")
	}

	if mmContains.defaultExpectation == nil {
		mmContains.defaultExpectation = &IndexMockContainsExpectation{}
	}

	mmContains.defaultExpectation.params = &IndexMockContainsParams{m1}
	for _, e := range mmContains.expectations {
		if minimock.Equal(e.params, mmContains.defaultExpectation.params) {
			mmContains.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmContains.defaultExpectation.params)
		}
	}

	return mmContains
}

// Return sets up results that will be returned by Index.Contains
func (mmContains *mIndexMockContains) Return(b1 bool, i1 int64, err error) *IndexMock {
	if mmContains.mock.funcContains != nil {
		mmContains.mock.t.Fatalf("IndexMock.Contains mock is already set by Set")
	}

	if mmContains.defaultExpectation == nil {
		mmContains.defaultExpectation = &IndexMockContainsExpectation{mock: mmContains.mock}
	}
	mmContains.defaultExpectation.results = &IndexMockContainsResults{b1, i1, err}
	return mmContains.mock
}

//Set uses given function f to mock the Index.Contains method
func (mmContains *mIndexMockContains) Set(f func(m1 coordinates.Module) (b1 bool, i1 int64, err error)) *IndexMock {
	if mmContains.defaultExpectation != nil {
		mmContains.mock.t.Fatalf("Default expectation is already set for the Index.Contains method")
	}

	if len(mmContains.expectations) > 0 {
		mmContains.mock.t.Fatalf("Some expectations are already set for the Index.Contains method")
	}

	mmContains.mock.funcContains = f
	return mmContains.mock
}

// When sets expectation for the Index.Contains which will trigger the result defined by the following
// Then helper
func (mmContains *mIndexMockContains) When(m1 coordinates.Module) *IndexMockContainsExpectation {
	if mmContains.mock.funcContains != nil {
		mmContains.mock.t.Fatalf("IndexMock.Contains mock is already set by Set")
	}

	expectation := &IndexMockContainsExpectation{
		mock:   mmContains.mock,
		params: &IndexMockContainsParams{m1},
	}
	mmContains.expectations = append(mmContains.expectations, expectation)
	return expectation
}

// Then sets up Index.Contains return parameters for the expectation previously defined by the When method
func (e *IndexMockContainsExpectation) Then(b1 bool, i1 int64, err error) *IndexMock {
	e.results = &IndexMockContainsResults{b1, i1, err}
	return e.mock
}

// Contains implements Index
func (mmContains *IndexMock) Contains(m1 coordinates.Module) (b1 bool, i1 int64, err error) {
	mm_atomic.AddUint64(&mmContains.beforeContainsCounter, 1)
	defer mm_atomic.AddUint64(&mmContains.afterContainsCounter, 1)

	params := &IndexMockContainsParams{m1}

	// Record call args
	mmContains.ContainsMock.mutex.Lock()
	mmContains.ContainsMock.callArgs = append(mmContains.ContainsMock.callArgs, params)
	mmContains.ContainsMock.mutex.Unlock()

	for _, e := range mmContains.ContainsMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.b1, e.results.i1, e.results.err
		}
	}

	if mmContains.ContainsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmContains.ContainsMock.defaultExpectation.Counter, 1)
		want := mmContains.ContainsMock.defaultExpectation.params
		got := IndexMockContainsParams{m1}
		if want != nil && !minimock.Equal(*want, got) {
			mmContains.t.Errorf("IndexMock.Contains got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := mmContains.ContainsMock.defaultExpectation.results
		if results == nil {
			mmContains.t.Fatal("No results are set for the IndexMock.Contains")
		}
		return (*results).b1, (*results).i1, (*results).err
	}
	if mmContains.funcContains != nil {
		return mmContains.funcContains(m1)
	}
	mmContains.t.Fatalf("Unexpected call to IndexMock.Contains. %v", m1)
	return
}

// ContainsAfterCounter returns a count of finished IndexMock.Contains invocations
func (mmContains *IndexMock) ContainsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmContains.afterContainsCounter)
}

// ContainsBeforeCounter returns a count of IndexMock.Contains invocations
func (mmContains *IndexMock) ContainsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmContains.beforeContainsCounter)
}

// Calls returns a list of arguments used in each call to IndexMock.Contains.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmContains *mIndexMockContains) Calls() []*IndexMockContainsParams {
	mmContains.mutex.RLock()

	argCopy := make([]*IndexMockContainsParams, len(mmContains.callArgs))
	copy(argCopy, mmContains.callArgs)

	mmContains.mutex.RUnlock()

	return argCopy
}

// MinimockContainsDone returns true if the count of the Contains invocations corresponds
// the number of defined expectations
func (m *IndexMock) MinimockContainsDone() bool {
	for _, e := range m.ContainsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ContainsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterContainsCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcContains != nil && mm_atomic.LoadUint64(&m.afterContainsCounter) < 1 {
		return false
	}
	return true
}

// MinimockContainsInspect logs each unmet expectation
func (m *IndexMock) MinimockContainsInspect() {
	for _, e := range m.ContainsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IndexMock.Contains with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ContainsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterContainsCounter) < 1 {
		if m.ContainsMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to IndexMock.Contains")
		} else {
			m.t.Errorf("Expected call to IndexMock.Contains with params: %#v", *m.ContainsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcContains != nil && mm_atomic.LoadUint64(&m.afterContainsCounter) < 1 {
		m.t.Error("Expected call to IndexMock.Contains")
	}
}

type mIndexMockIDs struct {
	mock               *IndexMock
	defaultExpectation *IndexMockIDsExpectation
	expectations       []*IndexMockIDsExpectation
}

// IndexMockIDsExpectation specifies expectation struct of the Index.IDs
type IndexMockIDsExpectation struct {
	mock *IndexMock

	results *IndexMockIDsResults
	Counter uint64
}

// IndexMockIDsResults contains results of the Index.IDs
type IndexMockIDsResults struct {
	r1  Ranges
	err error
}

// Expect sets up expected params for Index.IDs
func (mmIDs *mIndexMockIDs) Expect() *mIndexMockIDs {
	if mmIDs.mock.funcIDs != nil {
		mmIDs.mock.t.Fatalf("IndexMock.IDs mock is already set by Set")
	}

	if mmIDs.defaultExpectation == nil {
		mmIDs.defaultExpectation = &IndexMockIDsExpectation{}
	}

	return mmIDs
}

// Return sets up results that will be returned by Index.IDs
func (mmIDs *mIndexMockIDs) Return(r1 Ranges, err error) *IndexMock {
	if mmIDs.mock.funcIDs != nil {
		mmIDs.mock.t.Fatalf("IndexMock.IDs mock is already set by Set")
	}

	if mmIDs.defaultExpectation == nil {
		mmIDs.defaultExpectation = &IndexMockIDsExpectation{mock: mmIDs.mock}
	}
	mmIDs.defaultExpectation.results = &IndexMockIDsResults{r1, err}
	return mmIDs.mock
}

//Set uses given function f to mock the Index.IDs method
func (mmIDs *mIndexMockIDs) Set(f func() (r1 Ranges, err error)) *IndexMock {
	if mmIDs.defaultExpectation != nil {
		mmIDs.mock.t.Fatalf("Default expectation is already set for the Index.IDs method")
	}

	if len(mmIDs.expectations) > 0 {
		mmIDs.mock.t.Fatalf("Some expectations are already set for the Index.IDs method")
	}

	mmIDs.mock.funcIDs = f
	return mmIDs.mock
}

// IDs implements Index
func (mmIDs *IndexMock) IDs() (r1 Ranges, err error) {
	mm_atomic.AddUint64(&mmIDs.beforeIDsCounter, 1)
	defer mm_atomic.AddUint64(&mmIDs.afterIDsCounter, 1)

	if mmIDs.IDsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmIDs.IDsMock.defaultExpectation.Counter, 1)

		results := mmIDs.IDsMock.defaultExpectation.results
		if results == nil {
			mmIDs.t.Fatal("No results are set for the IndexMock.IDs")
		}
		return (*results).r1, (*results).err
	}
	if mmIDs.funcIDs != nil {
		return mmIDs.funcIDs()
	}
	mmIDs.t.Fatalf("Unexpected call to IndexMock.IDs.")
	return
}

// IDsAfterCounter returns a count of finished IndexMock.IDs invocations
func (mmIDs *IndexMock) IDsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmIDs.afterIDsCounter)
}

// IDsBeforeCounter returns a count of IndexMock.IDs invocations
func (mmIDs *IndexMock) IDsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmIDs.beforeIDsCounter)
}

// MinimockIDsDone returns true if the count of the IDs invocations corresponds
// the number of defined expectations
func (m *IndexMock) MinimockIDsDone() bool {
	for _, e := range m.IDsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.IDsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterIDsCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcIDs != nil && mm_atomic.LoadUint64(&m.afterIDsCounter) < 1 {
		return false
	}
	return true
}

// MinimockIDsInspect logs each unmet expectation
func (m *IndexMock) MinimockIDsInspect() {
	for _, e := range m.IDsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to IndexMock.IDs")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.IDsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterIDsCounter) < 1 {
		m.t.Error("Expected call to IndexMock.IDs")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcIDs != nil && mm_atomic.LoadUint64(&m.afterIDsCounter) < 1 {
		m.t.Error("Expected call to IndexMock.IDs")
	}
}

type mIndexMockInfo struct {
	mock               *IndexMock
	defaultExpectation *IndexMockInfoExpectation
	expectations       []*IndexMockInfoExpectation

	callArgs []*IndexMockInfoParams
	mutex    sync.RWMutex
}

// IndexMockInfoExpectation specifies expectation struct of the Index.Info
type IndexMockInfoExpectation struct {
	mock    *IndexMock
	params  *IndexMockInfoParams
	results *IndexMockInfoResults
	Counter uint64
}

// IndexMockInfoParams contains parameters of the Index.Info
type IndexMockInfoParams struct {
	m1 coordinates.Module
}

// IndexMockInfoResults contains results of the Index.Info
type IndexMockInfoResults struct {
	r1  repository.RevInfo
	err error
}

// Expect sets up expected params for Index.Info
func (mmInfo *mIndexMockInfo) Expect(m1 coordinates.Module) *mIndexMockInfo {
	if mmInfo.mock.funcInfo != nil {
		mmInfo.mock.t.Fatalf("IndexMock.Info mock is already set by Set")
	}

	if mmInfo.defaultExpectation == nil {
		mmInfo.defaultExpectation = &IndexMockInfoExpectation{}
	}

	mmInfo.defaultExpectation.params = &IndexMockInfoParams{m1}
	for _, e := range mmInfo.expectations {
		if minimock.Equal(e.params, mmInfo.defaultExpectation.params) {
			mmInfo.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmInfo.defaultExpectation.params)
		}
	}

	return mmInfo
}

// Return sets up results that will be returned by Index.Info
func (mmInfo *mIndexMockInfo) Return(r1 repository.RevInfo, err error) *IndexMock {
	if mmInfo.mock.funcInfo != nil {
		mmInfo.mock.t.Fatalf("IndexMock.Info mock is already set by Set")
	}

	if mmInfo.defaultExpectation == nil {
		mmInfo.defaultExpectation = &IndexMockInfoExpectation{mock: mmInfo.mock}
	}
	mmInfo.defaultExpectation.results = &IndexMockInfoResults{r1, err}
	return mmInfo.mock
}

//Set uses given function f to mock the Index.Info method
func (mmInfo *mIndexMockInfo) Set(f func(m1 coordinates.Module) (r1 repository.RevInfo, err error)) *IndexMock {
	if mmInfo.defaultExpectation != nil {
		mmInfo.mock.t.Fatalf("Default expectation is already set for the Index.Info method")
	}

	if len(mmInfo.expectations) > 0 {
		mmInfo.mock.t.Fatalf("Some expectations are already set for the Index.Info method")
	}

	mmInfo.mock.funcInfo = f
	return mmInfo.mock
}

// When sets expectation for the Index.Info which will trigger the result defined by the following
// Then helper
func (mmInfo *mIndexMockInfo) When(m1 coordinates.Module) *IndexMockInfoExpectation {
	if mmInfo.mock.funcInfo != nil {
		mmInfo.mock.t.Fatalf("IndexMock.Info mock is already set by Set")
	}

	expectation := &IndexMockInfoExpectation{
		mock:   mmInfo.mock,
		params: &IndexMockInfoParams{m1},
	}
	mmInfo.expectations = append(mmInfo.expectations, expectation)
	return expectation
}

// Then sets up Index.Info return parameters for the expectation previously defined by the When method
func (e *IndexMockInfoExpectation) Then(r1 repository.RevInfo, err error) *IndexMock {
	e.results = &IndexMockInfoResults{r1, err}
	return e.mock
}

// Info implements Index
func (mmInfo *IndexMock) Info(m1 coordinates.Module) (r1 repository.RevInfo, err error) {
	mm_atomic.AddUint64(&mmInfo.beforeInfoCounter, 1)
	defer mm_atomic.AddUint64(&mmInfo.afterInfoCounter, 1)

	params := &IndexMockInfoParams{m1}

	// Record call args
	mmInfo.InfoMock.mutex.Lock()
	mmInfo.InfoMock.callArgs = append(mmInfo.InfoMock.callArgs, params)
	mmInfo.InfoMock.mutex.Unlock()

	for _, e := range mmInfo.InfoMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.r1, e.results.err
		}
	}

	if mmInfo.InfoMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmInfo.InfoMock.defaultExpectation.Counter, 1)
		want := mmInfo.InfoMock.defaultExpectation.params
		got := IndexMockInfoParams{m1}
		if want != nil && !minimock.Equal(*want, got) {
			mmInfo.t.Errorf("IndexMock.Info got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := mmInfo.InfoMock.defaultExpectation.results
		if results == nil {
			mmInfo.t.Fatal("No results are set for the IndexMock.Info")
		}
		return (*results).r1, (*results).err
	}
	if mmInfo.funcInfo != nil {
		return mmInfo.funcInfo(m1)
	}
	mmInfo.t.Fatalf("Unexpected call to IndexMock.Info. %v", m1)
	return
}

// InfoAfterCounter returns a count of finished IndexMock.Info invocations
func (mmInfo *IndexMock) InfoAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmInfo.afterInfoCounter)
}

// InfoBeforeCounter returns a count of IndexMock.Info invocations
func (mmInfo *IndexMock) InfoBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmInfo.beforeInfoCounter)
}

// Calls returns a list of arguments used in each call to IndexMock.Info.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmInfo *mIndexMockInfo) Calls() []*IndexMockInfoParams {
	mmInfo.mutex.RLock()

	argCopy := make([]*IndexMockInfoParams, len(mmInfo.callArgs))
	copy(argCopy, mmInfo.callArgs)

	mmInfo.mutex.RUnlock()

	return argCopy
}

// MinimockInfoDone returns true if the count of the Info invocations corresponds
// the number of defined expectations
func (m *IndexMock) MinimockInfoDone() bool {
	for _, e := range m.InfoMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.InfoMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterInfoCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcInfo != nil && mm_atomic.LoadUint64(&m.afterInfoCounter) < 1 {
		return false
	}
	return true
}

// MinimockInfoInspect logs each unmet expectation
func (m *IndexMock) MinimockInfoInspect() {
	for _, e := range m.InfoMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IndexMock.Info with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.InfoMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterInfoCounter) < 1 {
		if m.InfoMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to IndexMock.Info")
		} else {
			m.t.Errorf("Expected call to IndexMock.Info with params: %#v", *m.InfoMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcInfo != nil && mm_atomic.LoadUint64(&m.afterInfoCounter) < 1 {
		m.t.Error("Expected call to IndexMock.Info")
	}
}

type mIndexMockMod struct {
	mock               *IndexMock
	defaultExpectation *IndexMockModExpectation
	expectations       []*IndexMockModExpectation

	callArgs []*IndexMockModParams
	mutex    sync.RWMutex
}

// IndexMockModExpectation specifies expectation struct of the Index.Mod
type IndexMockModExpectation struct {
	mock    *IndexMock
	params  *IndexMockModParams
	results *IndexMockModResults
	Counter uint64
}

// IndexMockModParams contains parameters of the Index.Mod
type IndexMockModParams struct {
	m1 coordinates.Module
}

// IndexMockModResults contains results of the Index.Mod
type IndexMockModResults struct {
	s1  string
	err error
}

// Expect sets up expected params for Index.Mod
func (mmMod *mIndexMockMod) Expect(m1 coordinates.Module) *mIndexMockMod {
	if mmMod.mock.funcMod != nil {
		mmMod.mock.t.Fatalf("IndexMock.Mod mock is already set by Set")
	}

	if mmMod.defaultExpectation == nil {
		mmMod.defaultExpectation = &IndexMockModExpectation{}
	}

	mmMod.defaultExpectation.params = &IndexMockModParams{m1}
	for _, e := range mmMod.expectations {
		if minimock.Equal(e.params, mmMod.defaultExpectation.params) {
			mmMod.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmMod.defaultExpectation.params)
		}
	}

	return mmMod
}

// Return sets up results that will be returned by Index.Mod
func (mmMod *mIndexMockMod) Return(s1 string, err error) *IndexMock {
	if mmMod.mock.funcMod != nil {
		mmMod.mock.t.Fatalf("IndexMock.Mod mock is already set by Set")
	}

	if mmMod.defaultExpectation == nil {
		mmMod.defaultExpectation = &IndexMockModExpectation{mock: mmMod.mock}
	}
	mmMod.defaultExpectation.results = &IndexMockModResults{s1, err}
	return mmMod.mock
}

//Set uses given function f to mock the Index.Mod method
func (mmMod *mIndexMockMod) Set(f func(m1 coordinates.Module) (s1 string, err error)) *IndexMock {
	if mmMod.defaultExpectation != nil {
		mmMod.mock.t.Fatalf("Default expectation is already set for the Index.Mod method")
	}

	if len(mmMod.expectations) > 0 {
		mmMod.mock.t.Fatalf("Some expectations are already set for the Index.Mod method")
	}

	mmMod.mock.funcMod = f
	return mmMod.mock
}

// When sets expectation for the Index.Mod which will trigger the result defined by the following
// Then helper
func (mmMod *mIndexMockMod) When(m1 coordinates.Module) *IndexMockModExpectation {
	if mmMod.mock.funcMod != nil {
		mmMod.mock.t.Fatalf("IndexMock.Mod mock is already set by Set")
	}

	expectation := &IndexMockModExpectation{
		mock:   mmMod.mock,
		params: &IndexMockModParams{m1},
	}
	mmMod.expectations = append(mmMod.expectations, expectation)
	return expectation
}

// Then sets up Index.Mod return parameters for the expectation previously defined by the When method
func (e *IndexMockModExpectation) Then(s1 string, err error) *IndexMock {
	e.results = &IndexMockModResults{s1, err}
	return e.mock
}

// Mod implements Index
func (mmMod *IndexMock) Mod(m1 coordinates.Module) (s1 string, err error) {
	mm_atomic.AddUint64(&mmMod.beforeModCounter, 1)
	defer mm_atomic.AddUint64(&mmMod.afterModCounter, 1)

	params := &IndexMockModParams{m1}

	// Record call args
	mmMod.ModMock.mutex.Lock()
	mmMod.ModMock.callArgs = append(mmMod.ModMock.callArgs, params)
	mmMod.ModMock.mutex.Unlock()

	for _, e := range mmMod.ModMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.s1, e.results.err
		}
	}

	if mmMod.ModMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmMod.ModMock.defaultExpectation.Counter, 1)
		want := mmMod.ModMock.defaultExpectation.params
		got := IndexMockModParams{m1}
		if want != nil && !minimock.Equal(*want, got) {
			mmMod.t.Errorf("IndexMock.Mod got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := mmMod.ModMock.defaultExpectation.results
		if results == nil {
			mmMod.t.Fatal("No results are set for the IndexMock.Mod")
		}
		return (*results).s1, (*results).err
	}
	if mmMod.funcMod != nil {
		return mmMod.funcMod(m1)
	}
	mmMod.t.Fatalf("Unexpected call to IndexMock.Mod. %v", m1)
	return
}

// ModAfterCounter returns a count of finished IndexMock.Mod invocations
func (mmMod *IndexMock) ModAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmMod.afterModCounter)
}

// ModBeforeCounter returns a count of IndexMock.Mod invocations
func (mmMod *IndexMock) ModBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmMod.beforeModCounter)
}

// Calls returns a list of arguments used in each call to IndexMock.Mod.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmMod *mIndexMockMod) Calls() []*IndexMockModParams {
	mmMod.mutex.RLock()

	argCopy := make([]*IndexMockModParams, len(mmMod.callArgs))
	copy(argCopy, mmMod.callArgs)

	mmMod.mutex.RUnlock()

	return argCopy
}

// MinimockModDone returns true if the count of the Mod invocations corresponds
// the number of defined expectations
func (m *IndexMock) MinimockModDone() bool {
	for _, e := range m.ModMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ModMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterModCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcMod != nil && mm_atomic.LoadUint64(&m.afterModCounter) < 1 {
		return false
	}
	return true
}

// MinimockModInspect logs each unmet expectation
func (m *IndexMock) MinimockModInspect() {
	for _, e := range m.ModMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IndexMock.Mod with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ModMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterModCounter) < 1 {
		if m.ModMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to IndexMock.Mod")
		} else {
			m.t.Errorf("Expected call to IndexMock.Mod with params: %#v", *m.ModMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcMod != nil && mm_atomic.LoadUint64(&m.afterModCounter) < 1 {
		m.t.Error("Expected call to IndexMock.Mod")
	}
}

type mIndexMockPut struct {
	mock               *IndexMock
	defaultExpectation *IndexMockPutExpectation
	expectations       []*IndexMockPutExpectation

	callArgs []*IndexMockPutParams
	mutex    sync.RWMutex
}

// IndexMockPutExpectation specifies expectation struct of the Index.Put
type IndexMockPutExpectation struct {
	mock    *IndexMock
	params  *IndexMockPutParams
	results *IndexMockPutResults
	Counter uint64
}

// IndexMockPutParams contains parameters of the Index.Put
type IndexMockPutParams struct {
	m1 ModuleAddition
}

// IndexMockPutResults contains results of the Index.Put
type IndexMockPutResults struct {
	err error
}

// Expect sets up expected params for Index.Put
func (mmPut *mIndexMockPut) Expect(m1 ModuleAddition) *mIndexMockPut {
	if mmPut.mock.funcPut != nil {
		mmPut.mock.t.Fatalf("IndexMock.Put mock is already set by Set")
	}

	if mmPut.defaultExpectation == nil {
		mmPut.defaultExpectation = &IndexMockPutExpectation{}
	}

	mmPut.defaultExpectation.params = &IndexMockPutParams{m1}
	for _, e := range mmPut.expectations {
		if minimock.Equal(e.params, mmPut.defaultExpectation.params) {
			mmPut.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmPut.defaultExpectation.params)
		}
	}

	return mmPut
}

// Return sets up results that will be returned by Index.Put
func (mmPut *mIndexMockPut) Return(err error) *IndexMock {
	if mmPut.mock.funcPut != nil {
		mmPut.mock.t.Fatalf("IndexMock.Put mock is already set by Set")
	}

	if mmPut.defaultExpectation == nil {
		mmPut.defaultExpectation = &IndexMockPutExpectation{mock: mmPut.mock}
	}
	mmPut.defaultExpectation.results = &IndexMockPutResults{err}
	return mmPut.mock
}

//Set uses given function f to mock the Index.Put method
func (mmPut *mIndexMockPut) Set(f func(m1 ModuleAddition) (err error)) *IndexMock {
	if mmPut.defaultExpectation != nil {
		mmPut.mock.t.Fatalf("Default expectation is already set for the Index.Put method")
	}

	if len(mmPut.expectations) > 0 {
		mmPut.mock.t.Fatalf("Some expectations are already set for the Index.Put method")
	}

	mmPut.mock.funcPut = f
	return mmPut.mock
}

// When sets expectation for the Index.Put which will trigger the result defined by the following
// Then helper
func (mmPut *mIndexMockPut) When(m1 ModuleAddition) *IndexMockPutExpectation {
	if mmPut.mock.funcPut != nil {
		mmPut.mock.t.Fatalf("IndexMock.Put mock is already set by Set")
	}

	expectation := &IndexMockPutExpectation{
		mock:   mmPut.mock,
		params: &IndexMockPutParams{m1},
	}
	mmPut.expectations = append(mmPut.expectations, expectation)
	return expectation
}

// Then sets up Index.Put return parameters for the expectation previously defined by the When method
func (e *IndexMockPutExpectation) Then(err error) *IndexMock {
	e.results = &IndexMockPutResults{err}
	return e.mock
}

// Put implements Index
func (mmPut *IndexMock) Put(m1 ModuleAddition) (err error) {
	mm_atomic.AddUint64(&mmPut.beforePutCounter, 1)
	defer mm_atomic.AddUint64(&mmPut.afterPutCounter, 1)

	params := &IndexMockPutParams{m1}

	// Record call args
	mmPut.PutMock.mutex.Lock()
	mmPut.PutMock.callArgs = append(mmPut.PutMock.callArgs, params)
	mmPut.PutMock.mutex.Unlock()

	for _, e := range mmPut.PutMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmPut.PutMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmPut.PutMock.defaultExpectation.Counter, 1)
		want := mmPut.PutMock.defaultExpectation.params
		got := IndexMockPutParams{m1}
		if want != nil && !minimock.Equal(*want, got) {
			mmPut.t.Errorf("IndexMock.Put got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := mmPut.PutMock.defaultExpectation.results
		if results == nil {
			mmPut.t.Fatal("No results are set for the IndexMock.Put")
		}
		return (*results).err
	}
	if mmPut.funcPut != nil {
		return mmPut.funcPut(m1)
	}
	mmPut.t.Fatalf("Unexpected call to IndexMock.Put. %v", m1)
	return
}

// PutAfterCounter returns a count of finished IndexMock.Put invocations
func (mmPut *IndexMock) PutAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmPut.afterPutCounter)
}

// PutBeforeCounter returns a count of IndexMock.Put invocations
func (mmPut *IndexMock) PutBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmPut.beforePutCounter)
}

// Calls returns a list of arguments used in each call to IndexMock.Put.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmPut *mIndexMockPut) Calls() []*IndexMockPutParams {
	mmPut.mutex.RLock()

	argCopy := make([]*IndexMockPutParams, len(mmPut.callArgs))
	copy(argCopy, mmPut.callArgs)

	mmPut.mutex.RUnlock()

	return argCopy
}

// MinimockPutDone returns true if the count of the Put invocations corresponds
// the number of defined expectations
func (m *IndexMock) MinimockPutDone() bool {
	for _, e := range m.PutMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.PutMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterPutCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcPut != nil && mm_atomic.LoadUint64(&m.afterPutCounter) < 1 {
		return false
	}
	return true
}

// MinimockPutInspect logs each unmet expectation
func (m *IndexMock) MinimockPutInspect() {
	for _, e := range m.PutMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IndexMock.Put with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.PutMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterPutCounter) < 1 {
		if m.PutMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to IndexMock.Put")
		} else {
			m.t.Errorf("Expected call to IndexMock.Put with params: %#v", *m.PutMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcPut != nil && mm_atomic.LoadUint64(&m.afterPutCounter) < 1 {
		m.t.Error("Expected call to IndexMock.Put")
	}
}

type mIndexMockRemove struct {
	mock               *IndexMock
	defaultExpectation *IndexMockRemoveExpectation
	expectations       []*IndexMockRemoveExpectation

	callArgs []*IndexMockRemoveParams
	mutex    sync.RWMutex
}

// IndexMockRemoveExpectation specifies expectation struct of the Index.Remove
type IndexMockRemoveExpectation struct {
	mock    *IndexMock
	params  *IndexMockRemoveParams
	results *IndexMockRemoveResults
	Counter uint64
}

// IndexMockRemoveParams contains parameters of the Index.Remove
type IndexMockRemoveParams struct {
	m1 coordinates.Module
}

// IndexMockRemoveResults contains results of the Index.Remove
type IndexMockRemoveResults struct {
	err error
}

// Expect sets up expected params for Index.Remove
func (mmRemove *mIndexMockRemove) Expect(m1 coordinates.Module) *mIndexMockRemove {
	if mmRemove.mock.funcRemove != nil {
		mmRemove.mock.t.Fatalf("IndexMock.Remove mock is already set by Set")
	}

	if mmRemove.defaultExpectation == nil {
		mmRemove.defaultExpectation = &IndexMockRemoveExpectation{}
	}

	mmRemove.defaultExpectation.params = &IndexMockRemoveParams{m1}
	for _, e := range mmRemove.expectations {
		if minimock.Equal(e.params, mmRemove.defaultExpectation.params) {
			mmRemove.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmRemove.defaultExpectation.params)
		}
	}

	return mmRemove
}

// Return sets up results that will be returned by Index.Remove
func (mmRemove *mIndexMockRemove) Return(err error) *IndexMock {
	if mmRemove.mock.funcRemove != nil {
		mmRemove.mock.t.Fatalf("IndexMock.Remove mock is already set by Set")
	}

	if mmRemove.defaultExpectation == nil {
		mmRemove.defaultExpectation = &IndexMockRemoveExpectation{mock: mmRemove.mock}
	}
	mmRemove.defaultExpectation.results = &IndexMockRemoveResults{err}
	return mmRemove.mock
}

//Set uses given function f to mock the Index.Remove method
func (mmRemove *mIndexMockRemove) Set(f func(m1 coordinates.Module) (err error)) *IndexMock {
	if mmRemove.defaultExpectation != nil {
		mmRemove.mock.t.Fatalf("Default expectation is already set for the Index.Remove method")
	}

	if len(mmRemove.expectations) > 0 {
		mmRemove.mock.t.Fatalf("Some expectations are already set for the Index.Remove method")
	}

	mmRemove.mock.funcRemove = f
	return mmRemove.mock
}

// When sets expectation for the Index.Remove which will trigger the result defined by the following
// Then helper
func (mmRemove *mIndexMockRemove) When(m1 coordinates.Module) *IndexMockRemoveExpectation {
	if mmRemove.mock.funcRemove != nil {
		mmRemove.mock.t.Fatalf("IndexMock.Remove mock is already set by Set")
	}

	expectation := &IndexMockRemoveExpectation{
		mock:   mmRemove.mock,
		params: &IndexMockRemoveParams{m1},
	}
	mmRemove.expectations = append(mmRemove.expectations, expectation)
	return expectation
}

// Then sets up Index.Remove return parameters for the expectation previously defined by the When method
func (e *IndexMockRemoveExpectation) Then(err error) *IndexMock {
	e.results = &IndexMockRemoveResults{err}
	return e.mock
}

// Remove implements Index
func (mmRemove *IndexMock) Remove(m1 coordinates.Module) (err error) {
	mm_atomic.AddUint64(&mmRemove.beforeRemoveCounter, 1)
	defer mm_atomic.AddUint64(&mmRemove.afterRemoveCounter, 1)

	params := &IndexMockRemoveParams{m1}

	// Record call args
	mmRemove.RemoveMock.mutex.Lock()
	mmRemove.RemoveMock.callArgs = append(mmRemove.RemoveMock.callArgs, params)
	mmRemove.RemoveMock.mutex.Unlock()

	for _, e := range mmRemove.RemoveMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmRemove.RemoveMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmRemove.RemoveMock.defaultExpectation.Counter, 1)
		want := mmRemove.RemoveMock.defaultExpectation.params
		got := IndexMockRemoveParams{m1}
		if want != nil && !minimock.Equal(*want, got) {
			mmRemove.t.Errorf("IndexMock.Remove got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := mmRemove.RemoveMock.defaultExpectation.results
		if results == nil {
			mmRemove.t.Fatal("No results are set for the IndexMock.Remove")
		}
		return (*results).err
	}
	if mmRemove.funcRemove != nil {
		return mmRemove.funcRemove(m1)
	}
	mmRemove.t.Fatalf("Unexpected call to IndexMock.Remove. %v", m1)
	return
}

// RemoveAfterCounter returns a count of finished IndexMock.Remove invocations
func (mmRemove *IndexMock) RemoveAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRemove.afterRemoveCounter)
}

// RemoveBeforeCounter returns a count of IndexMock.Remove invocations
func (mmRemove *IndexMock) RemoveBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRemove.beforeRemoveCounter)
}

// Calls returns a list of arguments used in each call to IndexMock.Remove.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmRemove *mIndexMockRemove) Calls() []*IndexMockRemoveParams {
	mmRemove.mutex.RLock()

	argCopy := make([]*IndexMockRemoveParams, len(mmRemove.callArgs))
	copy(argCopy, mmRemove.callArgs)

	mmRemove.mutex.RUnlock()

	return argCopy
}

// MinimockRemoveDone returns true if the count of the Remove invocations corresponds
// the number of defined expectations
func (m *IndexMock) MinimockRemoveDone() bool {
	for _, e := range m.RemoveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.RemoveMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterRemoveCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRemove != nil && mm_atomic.LoadUint64(&m.afterRemoveCounter) < 1 {
		return false
	}
	return true
}

// MinimockRemoveInspect logs each unmet expectation
func (m *IndexMock) MinimockRemoveInspect() {
	for _, e := range m.RemoveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IndexMock.Remove with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.RemoveMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterRemoveCounter) < 1 {
		if m.RemoveMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to IndexMock.Remove")
		} else {
			m.t.Errorf("Expected call to IndexMock.Remove with params: %#v", *m.RemoveMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRemove != nil && mm_atomic.LoadUint64(&m.afterRemoveCounter) < 1 {
		m.t.Error("Expected call to IndexMock.Remove")
	}
}

type mIndexMockSummary struct {
	mock               *IndexMock
	defaultExpectation *IndexMockSummaryExpectation
	expectations       []*IndexMockSummaryExpectation
}

// IndexMockSummaryExpectation specifies expectation struct of the Index.Summary
type IndexMockSummaryExpectation struct {
	mock *IndexMock

	results *IndexMockSummaryResults
	Counter uint64
}

// IndexMockSummaryResults contains results of the Index.Summary
type IndexMockSummaryResults struct {
	i1  int
	i2  int
	err error
}

// Expect sets up expected params for Index.Summary
func (mmSummary *mIndexMockSummary) Expect() *mIndexMockSummary {
	if mmSummary.mock.funcSummary != nil {
		mmSummary.mock.t.Fatalf("IndexMock.Summary mock is already set by Set")
	}

	if mmSummary.defaultExpectation == nil {
		mmSummary.defaultExpectation = &IndexMockSummaryExpectation{}
	}

	return mmSummary
}

// Return sets up results that will be returned by Index.Summary
func (mmSummary *mIndexMockSummary) Return(i1 int, i2 int, err error) *IndexMock {
	if mmSummary.mock.funcSummary != nil {
		mmSummary.mock.t.Fatalf("IndexMock.Summary mock is already set by Set")
	}

	if mmSummary.defaultExpectation == nil {
		mmSummary.defaultExpectation = &IndexMockSummaryExpectation{mock: mmSummary.mock}
	}
	mmSummary.defaultExpectation.results = &IndexMockSummaryResults{i1, i2, err}
	return mmSummary.mock
}

//Set uses given function f to mock the Index.Summary method
func (mmSummary *mIndexMockSummary) Set(f func() (i1 int, i2 int, err error)) *IndexMock {
	if mmSummary.defaultExpectation != nil {
		mmSummary.mock.t.Fatalf("Default expectation is already set for the Index.Summary method")
	}

	if len(mmSummary.expectations) > 0 {
		mmSummary.mock.t.Fatalf("Some expectations are already set for the Index.Summary method")
	}

	mmSummary.mock.funcSummary = f
	return mmSummary.mock
}

// Summary implements Index
func (mmSummary *IndexMock) Summary() (i1 int, i2 int, err error) {
	mm_atomic.AddUint64(&mmSummary.beforeSummaryCounter, 1)
	defer mm_atomic.AddUint64(&mmSummary.afterSummaryCounter, 1)

	if mmSummary.SummaryMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSummary.SummaryMock.defaultExpectation.Counter, 1)

		results := mmSummary.SummaryMock.defaultExpectation.results
		if results == nil {
			mmSummary.t.Fatal("No results are set for the IndexMock.Summary")
		}
		return (*results).i1, (*results).i2, (*results).err
	}
	if mmSummary.funcSummary != nil {
		return mmSummary.funcSummary()
	}
	mmSummary.t.Fatalf("Unexpected call to IndexMock.Summary.")
	return
}

// SummaryAfterCounter returns a count of finished IndexMock.Summary invocations
func (mmSummary *IndexMock) SummaryAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSummary.afterSummaryCounter)
}

// SummaryBeforeCounter returns a count of IndexMock.Summary invocations
func (mmSummary *IndexMock) SummaryBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSummary.beforeSummaryCounter)
}

// MinimockSummaryDone returns true if the count of the Summary invocations corresponds
// the number of defined expectations
func (m *IndexMock) MinimockSummaryDone() bool {
	for _, e := range m.SummaryMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SummaryMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSummaryCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSummary != nil && mm_atomic.LoadUint64(&m.afterSummaryCounter) < 1 {
		return false
	}
	return true
}

// MinimockSummaryInspect logs each unmet expectation
func (m *IndexMock) MinimockSummaryInspect() {
	for _, e := range m.SummaryMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to IndexMock.Summary")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SummaryMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSummaryCounter) < 1 {
		m.t.Error("Expected call to IndexMock.Summary")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSummary != nil && mm_atomic.LoadUint64(&m.afterSummaryCounter) < 1 {
		m.t.Error("Expected call to IndexMock.Summary")
	}
}

type mIndexMockUpdateID struct {
	mock               *IndexMock
	defaultExpectation *IndexMockUpdateIDExpectation
	expectations       []*IndexMockUpdateIDExpectation

	callArgs []*IndexMockUpdateIDParams
	mutex    sync.RWMutex
}

// IndexMockUpdateIDExpectation specifies expectation struct of the Index.UpdateID
type IndexMockUpdateIDExpectation struct {
	mock    *IndexMock
	params  *IndexMockUpdateIDParams
	results *IndexMockUpdateIDResults
	Counter uint64
}

// IndexMockUpdateIDParams contains parameters of the Index.UpdateID
type IndexMockUpdateIDParams struct {
	s1 coordinates.SerialModule
}

// IndexMockUpdateIDResults contains results of the Index.UpdateID
type IndexMockUpdateIDResults struct {
	err error
}

// Expect sets up expected params for Index.UpdateID
func (mmUpdateID *mIndexMockUpdateID) Expect(s1 coordinates.SerialModule) *mIndexMockUpdateID {
	if mmUpdateID.mock.funcUpdateID != nil {
		mmUpdateID.mock.t.Fatalf("IndexMock.UpdateID mock is already set by Set")
	}

	if mmUpdateID.defaultExpectation == nil {
		mmUpdateID.defaultExpectation = &IndexMockUpdateIDExpectation{}
	}

	mmUpdateID.defaultExpectation.params = &IndexMockUpdateIDParams{s1}
	for _, e := range mmUpdateID.expectations {
		if minimock.Equal(e.params, mmUpdateID.defaultExpectation.params) {
			mmUpdateID.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdateID.defaultExpectation.params)
		}
	}

	return mmUpdateID
}

// Return sets up results that will be returned by Index.UpdateID
func (mmUpdateID *mIndexMockUpdateID) Return(err error) *IndexMock {
	if mmUpdateID.mock.funcUpdateID != nil {
		mmUpdateID.mock.t.Fatalf("IndexMock.UpdateID mock is already set by Set")
	}

	if mmUpdateID.defaultExpectation == nil {
		mmUpdateID.defaultExpectation = &IndexMockUpdateIDExpectation{mock: mmUpdateID.mock}
	}
	mmUpdateID.defaultExpectation.results = &IndexMockUpdateIDResults{err}
	return mmUpdateID.mock
}

//Set uses given function f to mock the Index.UpdateID method
func (mmUpdateID *mIndexMockUpdateID) Set(f func(s1 coordinates.SerialModule) (err error)) *IndexMock {
	if mmUpdateID.defaultExpectation != nil {
		mmUpdateID.mock.t.Fatalf("Default expectation is already set for the Index.UpdateID method")
	}

	if len(mmUpdateID.expectations) > 0 {
		mmUpdateID.mock.t.Fatalf("Some expectations are already set for the Index.UpdateID method")
	}

	mmUpdateID.mock.funcUpdateID = f
	return mmUpdateID.mock
}

// When sets expectation for the Index.UpdateID which will trigger the result defined by the following
// Then helper
func (mmUpdateID *mIndexMockUpdateID) When(s1 coordinates.SerialModule) *IndexMockUpdateIDExpectation {
	if mmUpdateID.mock.funcUpdateID != nil {
		mmUpdateID.mock.t.Fatalf("IndexMock.UpdateID mock is already set by Set")
	}

	expectation := &IndexMockUpdateIDExpectation{
		mock:   mmUpdateID.mock,
		params: &IndexMockUpdateIDParams{s1},
	}
	mmUpdateID.expectations = append(mmUpdateID.expectations, expectation)
	return expectation
}

// Then sets up Index.UpdateID return parameters for the expectation previously defined by the When method
func (e *IndexMockUpdateIDExpectation) Then(err error) *IndexMock {
	e.results = &IndexMockUpdateIDResults{err}
	return e.mock
}

// UpdateID implements Index
func (mmUpdateID *IndexMock) UpdateID(s1 coordinates.SerialModule) (err error) {
	mm_atomic.AddUint64(&mmUpdateID.beforeUpdateIDCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdateID.afterUpdateIDCounter, 1)

	params := &IndexMockUpdateIDParams{s1}

	// Record call args
	mmUpdateID.UpdateIDMock.mutex.Lock()
	mmUpdateID.UpdateIDMock.callArgs = append(mmUpdateID.UpdateIDMock.callArgs, params)
	mmUpdateID.UpdateIDMock.mutex.Unlock()

	for _, e := range mmUpdateID.UpdateIDMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmUpdateID.UpdateIDMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdateID.UpdateIDMock.defaultExpectation.Counter, 1)
		want := mmUpdateID.UpdateIDMock.defaultExpectation.params
		got := IndexMockUpdateIDParams{s1}
		if want != nil && !minimock.Equal(*want, got) {
			mmUpdateID.t.Errorf("IndexMock.UpdateID got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := mmUpdateID.UpdateIDMock.defaultExpectation.results
		if results == nil {
			mmUpdateID.t.Fatal("No results are set for the IndexMock.UpdateID")
		}
		return (*results).err
	}
	if mmUpdateID.funcUpdateID != nil {
		return mmUpdateID.funcUpdateID(s1)
	}
	mmUpdateID.t.Fatalf("Unexpected call to IndexMock.UpdateID. %v", s1)
	return
}

// UpdateIDAfterCounter returns a count of finished IndexMock.UpdateID invocations
func (mmUpdateID *IndexMock) UpdateIDAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateID.afterUpdateIDCounter)
}

// UpdateIDBeforeCounter returns a count of IndexMock.UpdateID invocations
func (mmUpdateID *IndexMock) UpdateIDBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateID.beforeUpdateIDCounter)
}

// Calls returns a list of arguments used in each call to IndexMock.UpdateID.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdateID *mIndexMockUpdateID) Calls() []*IndexMockUpdateIDParams {
	mmUpdateID.mutex.RLock()

	argCopy := make([]*IndexMockUpdateIDParams, len(mmUpdateID.callArgs))
	copy(argCopy, mmUpdateID.callArgs)

	mmUpdateID.mutex.RUnlock()

	return argCopy
}

// MinimockUpdateIDDone returns true if the count of the UpdateID invocations corresponds
// the number of defined expectations
func (m *IndexMock) MinimockUpdateIDDone() bool {
	for _, e := range m.UpdateIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateIDMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateIDCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdateID != nil && mm_atomic.LoadUint64(&m.afterUpdateIDCounter) < 1 {
		return false
	}
	return true
}

// MinimockUpdateIDInspect logs each unmet expectation
func (m *IndexMock) MinimockUpdateIDInspect() {
	for _, e := range m.UpdateIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IndexMock.UpdateID with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateIDMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateIDCounter) < 1 {
		if m.UpdateIDMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to IndexMock.UpdateID")
		} else {
			m.t.Errorf("Expected call to IndexMock.UpdateID with params: %#v", *m.UpdateIDMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdateID != nil && mm_atomic.LoadUint64(&m.afterUpdateIDCounter) < 1 {
		m.t.Error("Expected call to IndexMock.UpdateID")
	}
}

type mIndexMockVersions struct {
	mock               *IndexMock
	defaultExpectation *IndexMockVersionsExpectation
	expectations       []*IndexMockVersionsExpectation

	callArgs []*IndexMockVersionsParams
	mutex    sync.RWMutex
}

// IndexMockVersionsExpectation specifies expectation struct of the Index.Versions
type IndexMockVersionsExpectation struct {
	mock    *IndexMock
	params  *IndexMockVersionsParams
	results *IndexMockVersionsResults
	Counter uint64
}

// IndexMockVersionsParams contains parameters of the Index.Versions
type IndexMockVersionsParams struct {
	module string
}

// IndexMockVersionsResults contains results of the Index.Versions
type IndexMockVersionsResults struct {
	sa1 []string
	err error
}

// Expect sets up expected params for Index.Versions
func (mmVersions *mIndexMockVersions) Expect(module string) *mIndexMockVersions {
	if mmVersions.mock.funcVersions != nil {
		mmVersions.mock.t.Fatalf("IndexMock.Versions mock is already set by Set")
	}

	if mmVersions.defaultExpectation == nil {
		mmVersions.defaultExpectation = &IndexMockVersionsExpectation{}
	}

	mmVersions.defaultExpectation.params = &IndexMockVersionsParams{module}
	for _, e := range mmVersions.expectations {
		if minimock.Equal(e.params, mmVersions.defaultExpectation.params) {
			mmVersions.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmVersions.defaultExpectation.params)
		}
	}

	return mmVersions
}

// Return sets up results that will be returned by Index.Versions
func (mmVersions *mIndexMockVersions) Return(sa1 []string, err error) *IndexMock {
	if mmVersions.mock.funcVersions != nil {
		mmVersions.mock.t.Fatalf("IndexMock.Versions mock is already set by Set")
	}

	if mmVersions.defaultExpectation == nil {
		mmVersions.defaultExpectation = &IndexMockVersionsExpectation{mock: mmVersions.mock}
	}
	mmVersions.defaultExpectation.results = &IndexMockVersionsResults{sa1, err}
	return mmVersions.mock
}

//Set uses given function f to mock the Index.Versions method
func (mmVersions *mIndexMockVersions) Set(f func(module string) (sa1 []string, err error)) *IndexMock {
	if mmVersions.defaultExpectation != nil {
		mmVersions.mock.t.Fatalf("Default expectation is already set for the Index.Versions method")
	}

	if len(mmVersions.expectations) > 0 {
		mmVersions.mock.t.Fatalf("Some expectations are already set for the Index.Versions method")
	}

	mmVersions.mock.funcVersions = f
	return mmVersions.mock
}

// When sets expectation for the Index.Versions which will trigger the result defined by the following
// Then helper
func (mmVersions *mIndexMockVersions) When(module string) *IndexMockVersionsExpectation {
	if mmVersions.mock.funcVersions != nil {
		mmVersions.mock.t.Fatalf("IndexMock.Versions mock is already set by Set")
	}

	expectation := &IndexMockVersionsExpectation{
		mock:   mmVersions.mock,
		params: &IndexMockVersionsParams{module},
	}
	mmVersions.expectations = append(mmVersions.expectations, expectation)
	return expectation
}

// Then sets up Index.Versions return parameters for the expectation previously defined by the When method
func (e *IndexMockVersionsExpectation) Then(sa1 []string, err error) *IndexMock {
	e.results = &IndexMockVersionsResults{sa1, err}
	return e.mock
}

// Versions implements Index
func (mmVersions *IndexMock) Versions(module string) (sa1 []string, err error) {
	mm_atomic.AddUint64(&mmVersions.beforeVersionsCounter, 1)
	defer mm_atomic.AddUint64(&mmVersions.afterVersionsCounter, 1)

	params := &IndexMockVersionsParams{module}

	// Record call args
	mmVersions.VersionsMock.mutex.Lock()
	mmVersions.VersionsMock.callArgs = append(mmVersions.VersionsMock.callArgs, params)
	mmVersions.VersionsMock.mutex.Unlock()

	for _, e := range mmVersions.VersionsMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.sa1, e.results.err
		}
	}

	if mmVersions.VersionsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmVersions.VersionsMock.defaultExpectation.Counter, 1)
		want := mmVersions.VersionsMock.defaultExpectation.params
		got := IndexMockVersionsParams{module}
		if want != nil && !minimock.Equal(*want, got) {
			mmVersions.t.Errorf("IndexMock.Versions got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := mmVersions.VersionsMock.defaultExpectation.results
		if results == nil {
			mmVersions.t.Fatal("No results are set for the IndexMock.Versions")
		}
		return (*results).sa1, (*results).err
	}
	if mmVersions.funcVersions != nil {
		return mmVersions.funcVersions(module)
	}
	mmVersions.t.Fatalf("Unexpected call to IndexMock.Versions. %v", module)
	return
}

// VersionsAfterCounter returns a count of finished IndexMock.Versions invocations
func (mmVersions *IndexMock) VersionsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmVersions.afterVersionsCounter)
}

// VersionsBeforeCounter returns a count of IndexMock.Versions invocations
func (mmVersions *IndexMock) VersionsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmVersions.beforeVersionsCounter)
}

// Calls returns a list of arguments used in each call to IndexMock.Versions.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmVersions *mIndexMockVersions) Calls() []*IndexMockVersionsParams {
	mmVersions.mutex.RLock()

	argCopy := make([]*IndexMockVersionsParams, len(mmVersions.callArgs))
	copy(argCopy, mmVersions.callArgs)

	mmVersions.mutex.RUnlock()

	return argCopy
}

// MinimockVersionsDone returns true if the count of the Versions invocations corresponds
// the number of defined expectations
func (m *IndexMock) MinimockVersionsDone() bool {
	for _, e := range m.VersionsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.VersionsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterVersionsCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcVersions != nil && mm_atomic.LoadUint64(&m.afterVersionsCounter) < 1 {
		return false
	}
	return true
}

// MinimockVersionsInspect logs each unmet expectation
func (m *IndexMock) MinimockVersionsInspect() {
	for _, e := range m.VersionsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IndexMock.Versions with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.VersionsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterVersionsCounter) < 1 {
		if m.VersionsMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to IndexMock.Versions")
		} else {
			m.t.Errorf("Expected call to IndexMock.Versions with params: %#v", *m.VersionsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcVersions != nil && mm_atomic.LoadUint64(&m.afterVersionsCounter) < 1 {
		m.t.Error("Expected call to IndexMock.Versions")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *IndexMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockContainsInspect()

		m.MinimockIDsInspect()

		m.MinimockInfoInspect()

		m.MinimockModInspect()

		m.MinimockPutInspect()

		m.MinimockRemoveInspect()

		m.MinimockSummaryInspect()

		m.MinimockUpdateIDInspect()

		m.MinimockVersionsInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *IndexMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *IndexMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockContainsDone() &&
		m.MinimockIDsDone() &&
		m.MinimockInfoDone() &&
		m.MinimockModDone() &&
		m.MinimockPutDone() &&
		m.MinimockRemoveDone() &&
		m.MinimockSummaryDone() &&
		m.MinimockUpdateIDDone() &&
		m.MinimockVersionsDone()
}
