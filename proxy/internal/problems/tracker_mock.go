package problems

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock"

	"oss.indeed.com/go/modprox/pkg/coordinates"
)

// TrackerMock implements Tracker
type TrackerMock struct {
	t minimock.Tester

	funcProblem          func(module coordinates.Module) (p1 Problem, b1 bool)
	afterProblemCounter  uint64
	beforeProblemCounter uint64
	ProblemMock          mTrackerMockProblem

	funcProblems          func() (pa1 []Problem)
	afterProblemsCounter  uint64
	beforeProblemsCounter uint64
	ProblemsMock          mTrackerMockProblems

	funcSet          func(p1 Problem)
	afterSetCounter  uint64
	beforeSetCounter uint64
	SetMock          mTrackerMockSet
}

// NewTrackerMock returns a mock for Tracker
func NewTrackerMock(t minimock.Tester) *TrackerMock {
	m := &TrackerMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.ProblemMock = mTrackerMockProblem{mock: m}
	m.ProblemMock.callArgs = []*TrackerMockProblemParams{}

	m.ProblemsMock = mTrackerMockProblems{mock: m}

	m.SetMock = mTrackerMockSet{mock: m}
	m.SetMock.callArgs = []*TrackerMockSetParams{}

	return m
}

type mTrackerMockProblem struct {
	mock               *TrackerMock
	defaultExpectation *TrackerMockProblemExpectation
	expectations       []*TrackerMockProblemExpectation

	callArgs []*TrackerMockProblemParams
	mutex    sync.RWMutex
}

// TrackerMockProblemExpectation specifies expectation struct of the Tracker.Problem
type TrackerMockProblemExpectation struct {
	mock    *TrackerMock
	params  *TrackerMockProblemParams
	results *TrackerMockProblemResults
	Counter uint64
}

// TrackerMockProblemParams contains parameters of the Tracker.Problem
type TrackerMockProblemParams struct {
	module coordinates.Module
}

// TrackerMockProblemResults contains results of the Tracker.Problem
type TrackerMockProblemResults struct {
	p1 Problem
	b1 bool
}

// Expect sets up expected params for Tracker.Problem
func (mmProblem *mTrackerMockProblem) Expect(module coordinates.Module) *mTrackerMockProblem {
	if mmProblem.mock.funcProblem != nil {
		mmProblem.mock.t.Fatalf("TrackerMock.Problem mock is already set by Set")
	}

	if mmProblem.defaultExpectation == nil {
		mmProblem.defaultExpectation = &TrackerMockProblemExpectation{}
	}

	mmProblem.defaultExpectation.params = &TrackerMockProblemParams{module}
	for _, e := range mmProblem.expectations {
		if minimock.Equal(e.params, mmProblem.defaultExpectation.params) {
			mmProblem.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmProblem.defaultExpectation.params)
		}
	}

	return mmProblem
}

// Return sets up results that will be returned by Tracker.Problem
func (mmProblem *mTrackerMockProblem) Return(p1 Problem, b1 bool) *TrackerMock {
	if mmProblem.mock.funcProblem != nil {
		mmProblem.mock.t.Fatalf("TrackerMock.Problem mock is already set by Set")
	}

	if mmProblem.defaultExpectation == nil {
		mmProblem.defaultExpectation = &TrackerMockProblemExpectation{mock: mmProblem.mock}
	}
	mmProblem.defaultExpectation.results = &TrackerMockProblemResults{p1, b1}
	return mmProblem.mock
}

//Set uses given function f to mock the Tracker.Problem method
func (mmProblem *mTrackerMockProblem) Set(f func(module coordinates.Module) (p1 Problem, b1 bool)) *TrackerMock {
	if mmProblem.defaultExpectation != nil {
		mmProblem.mock.t.Fatalf("Default expectation is already set for the Tracker.Problem method")
	}

	if len(mmProblem.expectations) > 0 {
		mmProblem.mock.t.Fatalf("Some expectations are already set for the Tracker.Problem method")
	}

	mmProblem.mock.funcProblem = f
	return mmProblem.mock
}

// When sets expectation for the Tracker.Problem which will trigger the result defined by the following
// Then helper
func (mmProblem *mTrackerMockProblem) When(module coordinates.Module) *TrackerMockProblemExpectation {
	if mmProblem.mock.funcProblem != nil {
		mmProblem.mock.t.Fatalf("TrackerMock.Problem mock is already set by Set")
	}

	expectation := &TrackerMockProblemExpectation{
		mock:   mmProblem.mock,
		params: &TrackerMockProblemParams{module},
	}
	mmProblem.expectations = append(mmProblem.expectations, expectation)
	return expectation
}

// Then sets up Tracker.Problem return parameters for the expectation previously defined by the When method
func (e *TrackerMockProblemExpectation) Then(p1 Problem, b1 bool) *TrackerMock {
	e.results = &TrackerMockProblemResults{p1, b1}
	return e.mock
}

// Problem implements Tracker
func (mmProblem *TrackerMock) Problem(module coordinates.Module) (p1 Problem, b1 bool) {
	mm_atomic.AddUint64(&mmProblem.beforeProblemCounter, 1)
	defer mm_atomic.AddUint64(&mmProblem.afterProblemCounter, 1)

	params := &TrackerMockProblemParams{module}

	// Record call args
	mmProblem.ProblemMock.mutex.Lock()
	mmProblem.ProblemMock.callArgs = append(mmProblem.ProblemMock.callArgs, params)
	mmProblem.ProblemMock.mutex.Unlock()

	for _, e := range mmProblem.ProblemMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.p1, e.results.b1
		}
	}

	if mmProblem.ProblemMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmProblem.ProblemMock.defaultExpectation.Counter, 1)
		want := mmProblem.ProblemMock.defaultExpectation.params
		got := TrackerMockProblemParams{module}
		if want != nil && !minimock.Equal(*want, got) {
			mmProblem.t.Errorf("TrackerMock.Problem got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := mmProblem.ProblemMock.defaultExpectation.results
		if results == nil {
			mmProblem.t.Fatal("No results are set for the TrackerMock.Problem")
		}
		return (*results).p1, (*results).b1
	}
	if mmProblem.funcProblem != nil {
		return mmProblem.funcProblem(module)
	}
	mmProblem.t.Fatalf("Unexpected call to TrackerMock.Problem. %v", module)
	return
}

// ProblemAfterCounter returns a count of finished TrackerMock.Problem invocations
func (mmProblem *TrackerMock) ProblemAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmProblem.afterProblemCounter)
}

// ProblemBeforeCounter returns a count of TrackerMock.Problem invocations
func (mmProblem *TrackerMock) ProblemBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmProblem.beforeProblemCounter)
}

// Calls returns a list of arguments used in each call to TrackerMock.Problem.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmProblem *mTrackerMockProblem) Calls() []*TrackerMockProblemParams {
	mmProblem.mutex.RLock()

	argCopy := make([]*TrackerMockProblemParams, len(mmProblem.callArgs))
	copy(argCopy, mmProblem.callArgs)

	mmProblem.mutex.RUnlock()

	return argCopy
}

// MinimockProblemDone returns true if the count of the Problem invocations corresponds
// the number of defined expectations
func (m *TrackerMock) MinimockProblemDone() bool {
	for _, e := range m.ProblemMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ProblemMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterProblemCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcProblem != nil && mm_atomic.LoadUint64(&m.afterProblemCounter) < 1 {
		return false
	}
	return true
}

// MinimockProblemInspect logs each unmet expectation
func (m *TrackerMock) MinimockProblemInspect() {
	for _, e := range m.ProblemMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to TrackerMock.Problem with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ProblemMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterProblemCounter) < 1 {
		if m.ProblemMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to TrackerMock.Problem")
		} else {
			m.t.Errorf("Expected call to TrackerMock.Problem with params: %#v", *m.ProblemMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcProblem != nil && mm_atomic.LoadUint64(&m.afterProblemCounter) < 1 {
		m.t.Error("Expected call to TrackerMock.Problem")
	}
}

type mTrackerMockProblems struct {
	mock               *TrackerMock
	defaultExpectation *TrackerMockProblemsExpectation
	expectations       []*TrackerMockProblemsExpectation
}

// TrackerMockProblemsExpectation specifies expectation struct of the Tracker.Problems
type TrackerMockProblemsExpectation struct {
	mock *TrackerMock

	results *TrackerMockProblemsResults
	Counter uint64
}

// TrackerMockProblemsResults contains results of the Tracker.Problems
type TrackerMockProblemsResults struct {
	pa1 []Problem
}

// Expect sets up expected params for Tracker.Problems
func (mmProblems *mTrackerMockProblems) Expect() *mTrackerMockProblems {
	if mmProblems.mock.funcProblems != nil {
		mmProblems.mock.t.Fatalf("TrackerMock.Problems mock is already set by Set")
	}

	if mmProblems.defaultExpectation == nil {
		mmProblems.defaultExpectation = &TrackerMockProblemsExpectation{}
	}

	return mmProblems
}

// Return sets up results that will be returned by Tracker.Problems
func (mmProblems *mTrackerMockProblems) Return(pa1 []Problem) *TrackerMock {
	if mmProblems.mock.funcProblems != nil {
		mmProblems.mock.t.Fatalf("TrackerMock.Problems mock is already set by Set")
	}

	if mmProblems.defaultExpectation == nil {
		mmProblems.defaultExpectation = &TrackerMockProblemsExpectation{mock: mmProblems.mock}
	}
	mmProblems.defaultExpectation.results = &TrackerMockProblemsResults{pa1}
	return mmProblems.mock
}

//Set uses given function f to mock the Tracker.Problems method
func (mmProblems *mTrackerMockProblems) Set(f func() (pa1 []Problem)) *TrackerMock {
	if mmProblems.defaultExpectation != nil {
		mmProblems.mock.t.Fatalf("Default expectation is already set for the Tracker.Problems method")
	}

	if len(mmProblems.expectations) > 0 {
		mmProblems.mock.t.Fatalf("Some expectations are already set for the Tracker.Problems method")
	}

	mmProblems.mock.funcProblems = f
	return mmProblems.mock
}

// Problems implements Tracker
func (mmProblems *TrackerMock) Problems() (pa1 []Problem) {
	mm_atomic.AddUint64(&mmProblems.beforeProblemsCounter, 1)
	defer mm_atomic.AddUint64(&mmProblems.afterProblemsCounter, 1)

	if mmProblems.ProblemsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmProblems.ProblemsMock.defaultExpectation.Counter, 1)

		results := mmProblems.ProblemsMock.defaultExpectation.results
		if results == nil {
			mmProblems.t.Fatal("No results are set for the TrackerMock.Problems")
		}
		return (*results).pa1
	}
	if mmProblems.funcProblems != nil {
		return mmProblems.funcProblems()
	}
	mmProblems.t.Fatalf("Unexpected call to TrackerMock.Problems.")
	return
}

// ProblemsAfterCounter returns a count of finished TrackerMock.Problems invocations
func (mmProblems *TrackerMock) ProblemsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmProblems.afterProblemsCounter)
}

// ProblemsBeforeCounter returns a count of TrackerMock.Problems invocations
func (mmProblems *TrackerMock) ProblemsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmProblems.beforeProblemsCounter)
}

// MinimockProblemsDone returns true if the count of the Problems invocations corresponds
// the number of defined expectations
func (m *TrackerMock) MinimockProblemsDone() bool {
	for _, e := range m.ProblemsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ProblemsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterProblemsCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcProblems != nil && mm_atomic.LoadUint64(&m.afterProblemsCounter) < 1 {
		return false
	}
	return true
}

// MinimockProblemsInspect logs each unmet expectation
func (m *TrackerMock) MinimockProblemsInspect() {
	for _, e := range m.ProblemsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to TrackerMock.Problems")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ProblemsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterProblemsCounter) < 1 {
		m.t.Error("Expected call to TrackerMock.Problems")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcProblems != nil && mm_atomic.LoadUint64(&m.afterProblemsCounter) < 1 {
		m.t.Error("Expected call to TrackerMock.Problems")
	}
}

type mTrackerMockSet struct {
	mock               *TrackerMock
	defaultExpectation *TrackerMockSetExpectation
	expectations       []*TrackerMockSetExpectation

	callArgs []*TrackerMockSetParams
	mutex    sync.RWMutex
}

// TrackerMockSetExpectation specifies expectation struct of the Tracker.Set
type TrackerMockSetExpectation struct {
	mock   *TrackerMock
	params *TrackerMockSetParams

	Counter uint64
}

// TrackerMockSetParams contains parameters of the Tracker.Set
type TrackerMockSetParams struct {
	p1 Problem
}

// Expect sets up expected params for Tracker.Set
func (mmSet *mTrackerMockSet) Expect(p1 Problem) *mTrackerMockSet {
	if mmSet.mock.funcSet != nil {
		mmSet.mock.t.Fatalf("TrackerMock.Set mock is already set by Set")
	}

	if mmSet.defaultExpectation == nil {
		mmSet.defaultExpectation = &TrackerMockSetExpectation{}
	}

	mmSet.defaultExpectation.params = &TrackerMockSetParams{p1}
	for _, e := range mmSet.expectations {
		if minimock.Equal(e.params, mmSet.defaultExpectation.params) {
			mmSet.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSet.defaultExpectation.params)
		}
	}

	return mmSet
}

// Return sets up results that will be returned by Tracker.Set
func (mmSet *mTrackerMockSet) Return() *TrackerMock {
	if mmSet.mock.funcSet != nil {
		mmSet.mock.t.Fatalf("TrackerMock.Set mock is already set by Set")
	}

	if mmSet.defaultExpectation == nil {
		mmSet.defaultExpectation = &TrackerMockSetExpectation{mock: mmSet.mock}
	}

	return mmSet.mock
}

//Set uses given function f to mock the Tracker.Set method
func (mmSet *mTrackerMockSet) Set(f func(p1 Problem)) *TrackerMock {
	if mmSet.defaultExpectation != nil {
		mmSet.mock.t.Fatalf("Default expectation is already set for the Tracker.Set method")
	}

	if len(mmSet.expectations) > 0 {
		mmSet.mock.t.Fatalf("Some expectations are already set for the Tracker.Set method")
	}

	mmSet.mock.funcSet = f
	return mmSet.mock
}

// Set implements Tracker
func (mmSet *TrackerMock) Set(p1 Problem) {
	mm_atomic.AddUint64(&mmSet.beforeSetCounter, 1)
	defer mm_atomic.AddUint64(&mmSet.afterSetCounter, 1)

	params := &TrackerMockSetParams{p1}

	// Record call args
	mmSet.SetMock.mutex.Lock()
	mmSet.SetMock.callArgs = append(mmSet.SetMock.callArgs, params)
	mmSet.SetMock.mutex.Unlock()

	for _, e := range mmSet.SetMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return
		}
	}

	if mmSet.SetMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSet.SetMock.defaultExpectation.Counter, 1)
		want := mmSet.SetMock.defaultExpectation.params
		got := TrackerMockSetParams{p1}
		if want != nil && !minimock.Equal(*want, got) {
			mmSet.t.Errorf("TrackerMock.Set got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		return

	}
	if mmSet.funcSet != nil {
		mmSet.funcSet(p1)
		return
	}
	mmSet.t.Fatalf("Unexpected call to TrackerMock.Set. %v", p1)

}

// SetAfterCounter returns a count of finished TrackerMock.Set invocations
func (mmSet *TrackerMock) SetAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSet.afterSetCounter)
}

// SetBeforeCounter returns a count of TrackerMock.Set invocations
func (mmSet *TrackerMock) SetBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSet.beforeSetCounter)
}

// Calls returns a list of arguments used in each call to TrackerMock.Set.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSet *mTrackerMockSet) Calls() []*TrackerMockSetParams {
	mmSet.mutex.RLock()

	argCopy := make([]*TrackerMockSetParams, len(mmSet.callArgs))
	copy(argCopy, mmSet.callArgs)

	mmSet.mutex.RUnlock()

	return argCopy
}

// MinimockSetDone returns true if the count of the Set invocations corresponds
// the number of defined expectations
func (m *TrackerMock) MinimockSetDone() bool {
	for _, e := range m.SetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SetMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSetCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSet != nil && mm_atomic.LoadUint64(&m.afterSetCounter) < 1 {
		return false
	}
	return true
}

// MinimockSetInspect logs each unmet expectation
func (m *TrackerMock) MinimockSetInspect() {
	for _, e := range m.SetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to TrackerMock.Set with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SetMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSetCounter) < 1 {
		if m.SetMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to TrackerMock.Set")
		} else {
			m.t.Errorf("Expected call to TrackerMock.Set with params: %#v", *m.SetMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSet != nil && mm_atomic.LoadUint64(&m.afterSetCounter) < 1 {
		m.t.Error("Expected call to TrackerMock.Set")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *TrackerMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockProblemInspect()

		m.MinimockProblemsInspect()

		m.MinimockSetInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *TrackerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *TrackerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockProblemDone() &&
		m.MinimockProblemsDone() &&
		m.MinimockSetDone()
}
